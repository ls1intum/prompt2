// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: certificate.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCertificateMetadata = `-- name: CreateCertificateMetadata :one
INSERT INTO certificate_metadata (student_id, course_id, certificate_url)
VALUES ($1, $2, $3)
RETURNING id, student_id, course_id, generated_at, last_download, download_count, certificate_url
`

type CreateCertificateMetadataParams struct {
	StudentID      uuid.UUID `json:"student_id"`
	CourseID       uuid.UUID `json:"course_id"`
	CertificateUrl string    `json:"certificate_url"`
}

func (q *Queries) CreateCertificateMetadata(ctx context.Context, arg CreateCertificateMetadataParams) (CertificateMetadatum, error) {
	row := q.db.QueryRow(ctx, createCertificateMetadata, arg.StudentID, arg.CourseID, arg.CertificateUrl)
	var i CertificateMetadatum
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.GeneratedAt,
		&i.LastDownload,
		&i.DownloadCount,
		&i.CertificateUrl,
	)
	return i, err
}

const deleteCertificateMetadata = `-- name: DeleteCertificateMetadata :exec
DELETE FROM certificate_metadata
WHERE student_id = $1 AND course_id = $2
`

type DeleteCertificateMetadataParams struct {
	StudentID uuid.UUID `json:"student_id"`
	CourseID  uuid.UUID `json:"course_id"`
}

func (q *Queries) DeleteCertificateMetadata(ctx context.Context, arg DeleteCertificateMetadataParams) error {
	_, err := q.db.Exec(ctx, deleteCertificateMetadata, arg.StudentID, arg.CourseID)
	return err
}

const getCertificateMetadata = `-- name: GetCertificateMetadata :one
SELECT id, student_id, course_id, generated_at, last_download, download_count, certificate_url FROM certificate_metadata
WHERE student_id = $1 AND course_id = $2 LIMIT 1
`

type GetCertificateMetadataParams struct {
	StudentID uuid.UUID `json:"student_id"`
	CourseID  uuid.UUID `json:"course_id"`
}

func (q *Queries) GetCertificateMetadata(ctx context.Context, arg GetCertificateMetadataParams) (CertificateMetadatum, error) {
	row := q.db.QueryRow(ctx, getCertificateMetadata, arg.StudentID, arg.CourseID)
	var i CertificateMetadatum
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.GeneratedAt,
		&i.LastDownload,
		&i.DownloadCount,
		&i.CertificateUrl,
	)
	return i, err
}

const getCertificateMetadataByStudentID = `-- name: GetCertificateMetadataByStudentID :one
SELECT id, student_id, course_id, generated_at, last_download, download_count, certificate_url FROM certificate_metadata
WHERE student_id = $1 LIMIT 1
`

func (q *Queries) GetCertificateMetadataByStudentID(ctx context.Context, studentID uuid.UUID) (CertificateMetadatum, error) {
	row := q.db.QueryRow(ctx, getCertificateMetadataByStudentID, studentID)
	var i CertificateMetadatum
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.GeneratedAt,
		&i.LastDownload,
		&i.DownloadCount,
		&i.CertificateUrl,
	)
	return i, err
}

const listCertificateMetadataByCourse = `-- name: ListCertificateMetadataByCourse :many
SELECT id, student_id, course_id, generated_at, last_download, download_count, certificate_url FROM certificate_metadata
WHERE course_id = $1
ORDER BY generated_at DESC
`

func (q *Queries) ListCertificateMetadataByCourse(ctx context.Context, courseID uuid.UUID) ([]CertificateMetadatum, error) {
	rows, err := q.db.Query(ctx, listCertificateMetadataByCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CertificateMetadatum
	for rows.Next() {
		var i CertificateMetadatum
		if err := rows.Scan(
			&i.ID,
			&i.StudentID,
			&i.CourseID,
			&i.GeneratedAt,
			&i.LastDownload,
			&i.DownloadCount,
			&i.CertificateUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCertificateMetadata = `-- name: UpdateCertificateMetadata :one
UPDATE certificate_metadata
SET generated_at = $3,
    certificate_url = $4
WHERE student_id = $1 AND course_id = $2
RETURNING id, student_id, course_id, generated_at, last_download, download_count, certificate_url
`

type UpdateCertificateMetadataParams struct {
	StudentID      uuid.UUID          `json:"student_id"`
	CourseID       uuid.UUID          `json:"course_id"`
	GeneratedAt    pgtype.Timestamptz `json:"generated_at"`
	CertificateUrl string             `json:"certificate_url"`
}

func (q *Queries) UpdateCertificateMetadata(ctx context.Context, arg UpdateCertificateMetadataParams) (CertificateMetadatum, error) {
	row := q.db.QueryRow(ctx, updateCertificateMetadata,
		arg.StudentID,
		arg.CourseID,
		arg.GeneratedAt,
		arg.CertificateUrl,
	)
	var i CertificateMetadatum
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.GeneratedAt,
		&i.LastDownload,
		&i.DownloadCount,
		&i.CertificateUrl,
	)
	return i, err
}

const updateDownloadInfo = `-- name: UpdateDownloadInfo :one
UPDATE certificate_metadata
SET last_download = $3,
    download_count = download_count + 1
WHERE student_id = $1 AND course_id = $2
RETURNING id, student_id, course_id, generated_at, last_download, download_count, certificate_url
`

type UpdateDownloadInfoParams struct {
	StudentID    uuid.UUID          `json:"student_id"`
	CourseID     uuid.UUID          `json:"course_id"`
	LastDownload pgtype.Timestamptz `json:"last_download"`
}

func (q *Queries) UpdateDownloadInfo(ctx context.Context, arg UpdateDownloadInfoParams) (CertificateMetadatum, error) {
	row := q.db.QueryRow(ctx, updateDownloadInfo, arg.StudentID, arg.CourseID, arg.LastDownload)
	var i CertificateMetadatum
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.GeneratedAt,
		&i.LastDownload,
		&i.DownloadCount,
		&i.CertificateUrl,
	)
	return i, err
}

const upsertCertificateMetadata = `-- name: UpsertCertificateMetadata :one
INSERT INTO certificate_metadata (student_id, course_id, generated_at, certificate_url)
VALUES ($1, $2, $3, $4)
ON CONFLICT (student_id, course_id)
DO UPDATE SET
    generated_at = EXCLUDED.generated_at,
    certificate_url = EXCLUDED.certificate_url
RETURNING id, student_id, course_id, generated_at, last_download, download_count, certificate_url
`

type UpsertCertificateMetadataParams struct {
	StudentID      uuid.UUID          `json:"student_id"`
	CourseID       uuid.UUID          `json:"course_id"`
	GeneratedAt    pgtype.Timestamptz `json:"generated_at"`
	CertificateUrl string             `json:"certificate_url"`
}

func (q *Queries) UpsertCertificateMetadata(ctx context.Context, arg UpsertCertificateMetadataParams) (CertificateMetadatum, error) {
	row := q.db.QueryRow(ctx, upsertCertificateMetadata,
		arg.StudentID,
		arg.CourseID,
		arg.GeneratedAt,
		arg.CertificateUrl,
	)
	var i CertificateMetadatum
	err := row.Scan(
		&i.ID,
		&i.StudentID,
		&i.CourseID,
		&i.GeneratedAt,
		&i.LastDownload,
		&i.DownloadCount,
		&i.CertificateUrl,
	)
	return i, err
}
