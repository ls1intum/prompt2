// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tutor.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTutor = `-- name: CreateTutor :exec
INSERT INTO tutor (course_phase_id, course_participation_id, first_name, last_name, team_id)
VALUES ($1, $2, $3, $4, $5)
`

type CreateTutorParams struct {
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	FirstName             string    `json:"first_name"`
	LastName              string    `json:"last_name"`
	TeamID                uuid.UUID `json:"team_id"`
}

func (q *Queries) CreateTutor(ctx context.Context, arg CreateTutorParams) error {
	_, err := q.db.Exec(ctx, createTutor,
		arg.CoursePhaseID,
		arg.CourseParticipationID,
		arg.FirstName,
		arg.LastName,
		arg.TeamID,
	)
	return err
}

const getTutorByCourseParticipationID = `-- name: GetTutorByCourseParticipationID :one
SELECT t.course_phase_id, t.course_participation_id, t.first_name, t.last_name, t.team_id
FROM tutor t
WHERE t.course_participation_id = $1
  AND t.course_phase_id = $2
`

type GetTutorByCourseParticipationIDParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) GetTutorByCourseParticipationID(ctx context.Context, arg GetTutorByCourseParticipationIDParams) (Tutor, error) {
	row := q.db.QueryRow(ctx, getTutorByCourseParticipationID, arg.CourseParticipationID, arg.CoursePhaseID)
	var i Tutor
	err := row.Scan(
		&i.CoursePhaseID,
		&i.CourseParticipationID,
		&i.FirstName,
		&i.LastName,
		&i.TeamID,
	)
	return i, err
}

const getTutorByTeamID = `-- name: GetTutorByTeamID :one
SELECT t.course_phase_id, t.course_participation_id, t.first_name, t.last_name, t.team_id
FROM tutor t
WHERE t.team_id = $1
  AND t.course_phase_id = $2
`

type GetTutorByTeamIDParams struct {
	TeamID        uuid.UUID `json:"team_id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) GetTutorByTeamID(ctx context.Context, arg GetTutorByTeamIDParams) (Tutor, error) {
	row := q.db.QueryRow(ctx, getTutorByTeamID, arg.TeamID, arg.CoursePhaseID)
	var i Tutor
	err := row.Scan(
		&i.CoursePhaseID,
		&i.CourseParticipationID,
		&i.FirstName,
		&i.LastName,
		&i.TeamID,
	)
	return i, err
}
