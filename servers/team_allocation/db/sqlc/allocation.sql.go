// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: allocation.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrUpdateAllocation = `-- name: CreateOrUpdateAllocation :exec
INSERT INTO allocations (
    id,
    course_participation_id,
    team_id,
    course_phase_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
)
ON CONFLICT (course_participation_id, team_id)
DO UPDATE SET
    team_id = EXCLUDED.team_id,
    course_phase_id = EXCLUDED.course_phase_id,
    updated_at = CURRENT_TIMESTAMP
`

type CreateOrUpdateAllocationParams struct {
	ID                    uuid.UUID `json:"id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	TeamID                uuid.UUID `json:"team_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateOrUpdateAllocation(ctx context.Context, arg CreateOrUpdateAllocationParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAllocation,
		arg.ID,
		arg.CourseParticipationID,
		arg.TeamID,
		arg.CoursePhaseID,
	)
	return err
}

const deleteAllocationsByPhase = `-- name: DeleteAllocationsByPhase :exec
DELETE FROM allocations a
USING team t
WHERE a.team_id = t.id
  AND t.course_phase_id = $1
`

func (q *Queries) DeleteAllocationsByPhase(ctx context.Context, coursePhaseID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllocationsByPhase, coursePhaseID)
	return err
}

const getAllocationForStudent = `-- name: GetAllocationForStudent :one
SELECT
    id,
    course_participation_id,
    team_id,
    course_phase_id,
    created_at,
    updated_at
FROM allocations
WHERE course_participation_id = $1
`

func (q *Queries) GetAllocationForStudent(ctx context.Context, courseParticipationID uuid.UUID) (Allocation, error) {
	row := q.db.QueryRow(ctx, getAllocationForStudent, courseParticipationID)
	var i Allocation
	err := row.Scan(
		&i.ID,
		&i.CourseParticipationID,
		&i.TeamID,
		&i.CoursePhaseID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllocationsByCoursePhase = `-- name: GetAllocationsByCoursePhase :many
SELECT a.id, a.course_participation_id, a.team_id, a.course_phase_id, a.created_at, a.updated_at
FROM allocations a
JOIN team t ON a.team_id = t.id
WHERE t.course_phase_id = $1
`

func (q *Queries) GetAllocationsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]Allocation, error) {
	rows, err := q.db.Query(ctx, getAllocationsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Allocation
	for rows.Next() {
		var i Allocation
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.TeamID,
			&i.CoursePhaseID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsForTeam = `-- name: GetStudentsForTeam :many
SELECT course_participation_id
FROM allocations
WHERE team_id = $1
`

func (q *Queries) GetStudentsForTeam(ctx context.Context, teamID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getStudentsForTeam, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var course_participation_id uuid.UUID
		if err := rows.Scan(&course_participation_id); err != nil {
			return nil, err
		}
		items = append(items, course_participation_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
