// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: allocation.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrUpdateAllocation = `-- name: CreateOrUpdateAllocation :exec
INSERT INTO allocations (id, course_participation_id, team_id)
VALUES ($1, $2, $3)
ON CONFLICT (course_participation_id) DO UPDATE
SET team_id = EXCLUDED.team_id
`

type CreateOrUpdateAllocationParams struct {
	ID                    uuid.UUID `json:"id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	TeamID                uuid.UUID `json:"team_id"`
}

func (q *Queries) CreateOrUpdateAllocation(ctx context.Context, arg CreateOrUpdateAllocationParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAllocation, arg.ID, arg.CourseParticipationID, arg.TeamID)
	return err
}

const deleteAllocationsByPhase = `-- name: DeleteAllocationsByPhase :exec
DELETE FROM allocations a
USING team t
WHERE a.team_id = t.id
AND t.course_phase_id = $1
`

func (q *Queries) DeleteAllocationsByPhase(ctx context.Context, coursePhaseID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllocationsByPhase, coursePhaseID)
	return err
}

const getAllocationForStudent = `-- name: GetAllocationForStudent :one
SELECT id, course_participation_id, team_id, created_at
FROM allocations
WHERE course_participation_id = $1
`

func (q *Queries) GetAllocationForStudent(ctx context.Context, courseParticipationID uuid.UUID) (Allocation, error) {
	row := q.db.QueryRow(ctx, getAllocationForStudent, courseParticipationID)
	var i Allocation
	err := row.Scan(
		&i.ID,
		&i.CourseParticipationID,
		&i.TeamID,
		&i.CreatedAt,
	)
	return i, err
}

const getAllocationsByCoursePhase = `-- name: GetAllocationsByCoursePhase :many
SELECT a.id, a.course_participation_id, a.team_id, a.created_at
FROM allocations a
JOIN team t ON a.team_id = t.id
WHERE t.course_phase_id = $1
`

func (q *Queries) GetAllocationsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]Allocation, error) {
	rows, err := q.db.Query(ctx, getAllocationsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Allocation
	for rows.Next() {
		var i Allocation
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.TeamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
