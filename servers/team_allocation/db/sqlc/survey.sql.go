// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: survey.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStudentSkillResponses = `-- name: DeleteStudentSkillResponses :exec
DELETE FROM student_skill_response
WHERE course_participation_id = $1
AND skill_id IN (
    SELECT id
    FROM skill
    WHERE course_phase_id = $2
)
`

type DeleteStudentSkillResponsesParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

// Deletes all student skill responses (for overwriting answers).
func (q *Queries) DeleteStudentSkillResponses(ctx context.Context, arg DeleteStudentSkillResponsesParams) error {
	_, err := q.db.Exec(ctx, deleteStudentSkillResponses, arg.CourseParticipationID, arg.CoursePhaseID)
	return err
}

const deleteStudentTeamPreferences = `-- name: DeleteStudentTeamPreferences :exec
DELETE FROM student_team_preference_response
WHERE course_participation_id = $1
AND team_id IN (
    SELECT id
    FROM team
    WHERE course_phase_id = $2
)
`

type DeleteStudentTeamPreferencesParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

// Deletes all student team preference responses (for overwriting answers).
func (q *Queries) DeleteStudentTeamPreferences(ctx context.Context, arg DeleteStudentTeamPreferencesParams) error {
	_, err := q.db.Exec(ctx, deleteStudentTeamPreferences, arg.CourseParticipationID, arg.CoursePhaseID)
	return err
}

const getStudentSkillResponses = `-- name: GetStudentSkillResponses :many
SELECT skill_id, rating
FROM student_skill_response
JOIN skill ON skill.id = student_skill_response.skill_id
WHERE course_participation_id = $1
AND skill.course_phase_id = $2
`

type GetStudentSkillResponsesParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

type GetStudentSkillResponsesRow struct {
	SkillID uuid.UUID `json:"skill_id"`
	Rating  int32     `json:"rating"`
}

// Returns the student’s skill responses.
func (q *Queries) GetStudentSkillResponses(ctx context.Context, arg GetStudentSkillResponsesParams) ([]GetStudentSkillResponsesRow, error) {
	rows, err := q.db.Query(ctx, getStudentSkillResponses, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentSkillResponsesRow
	for rows.Next() {
		var i GetStudentSkillResponsesRow
		if err := rows.Scan(&i.SkillID, &i.Rating); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentTeamPreferences = `-- name: GetStudentTeamPreferences :many
SELECT team_id, preference
FROM student_team_preference_response
JOIN team ON team.id = student_team_preference_response.team_id
WHERE course_participation_id = $1
AND team.course_phase_id = $2
`

type GetStudentTeamPreferencesParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

type GetStudentTeamPreferencesRow struct {
	TeamID     uuid.UUID `json:"team_id"`
	Preference int32     `json:"preference"`
}

// Returns the student’s team preference responses.
func (q *Queries) GetStudentTeamPreferences(ctx context.Context, arg GetStudentTeamPreferencesParams) ([]GetStudentTeamPreferencesRow, error) {
	rows, err := q.db.Query(ctx, getStudentTeamPreferences, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentTeamPreferencesRow
	for rows.Next() {
		var i GetStudentTeamPreferencesRow
		if err := rows.Scan(&i.TeamID, &i.Preference); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSurveyTimeframe = `-- name: GetSurveyTimeframe :one
SELECT survey_start, survey_deadline
FROM survey_timeframe
WHERE course_phase_id = $1
`

type GetSurveyTimeframeRow struct {
	SurveyStart    pgtype.Timestamp `json:"survey_start"`
	SurveyDeadline pgtype.Timestamp `json:"survey_deadline"`
}

// Returns the survey timeframe (survey_start and survey_deadline) for a course phase.
func (q *Queries) GetSurveyTimeframe(ctx context.Context, coursePhaseID uuid.UUID) (GetSurveyTimeframeRow, error) {
	row := q.db.QueryRow(ctx, getSurveyTimeframe, coursePhaseID)
	var i GetSurveyTimeframeRow
	err := row.Scan(&i.SurveyStart, &i.SurveyDeadline)
	return i, err
}

const insertStudentSkillResponse = `-- name: InsertStudentSkillResponse :exec
INSERT INTO student_skill_response (course_participation_id, skill_id, rating)
VALUES ($1, $2, $3)
`

type InsertStudentSkillResponseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	SkillID               uuid.UUID `json:"skill_id"`
	Rating                int32     `json:"rating"`
}

// Inserts a new student skill response.
func (q *Queries) InsertStudentSkillResponse(ctx context.Context, arg InsertStudentSkillResponseParams) error {
	_, err := q.db.Exec(ctx, insertStudentSkillResponse, arg.CourseParticipationID, arg.SkillID, arg.Rating)
	return err
}

const insertStudentTeamPreference = `-- name: InsertStudentTeamPreference :exec
INSERT INTO student_team_preference_response (course_participation_id, team_id, preference)
VALUES ($1, $2, $3)
`

type InsertStudentTeamPreferenceParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	TeamID                uuid.UUID `json:"team_id"`
	Preference            int32     `json:"preference"`
}

// Inserts a new student team preference.
func (q *Queries) InsertStudentTeamPreference(ctx context.Context, arg InsertStudentTeamPreferenceParams) error {
	_, err := q.db.Exec(ctx, insertStudentTeamPreference, arg.CourseParticipationID, arg.TeamID, arg.Preference)
	return err
}

const setSurveyTimeframe = `-- name: SetSurveyTimeframe :exec
INSERT INTO survey_timeframe (course_phase_id, survey_start, survey_deadline)
VALUES ($1, $2, $3)
ON CONFLICT (course_phase_id)
DO UPDATE SET survey_start = EXCLUDED.survey_start,
              survey_deadline = EXCLUDED.survey_deadline
`

type SetSurveyTimeframeParams struct {
	CoursePhaseID  uuid.UUID        `json:"course_phase_id"`
	SurveyStart    pgtype.Timestamp `json:"survey_start"`
	SurveyDeadline pgtype.Timestamp `json:"survey_deadline"`
}

// Upsert the survey timeframe for a given course phase.
func (q *Queries) SetSurveyTimeframe(ctx context.Context, arg SetSurveyTimeframeParams) error {
	_, err := q.db.Exec(ctx, setSurveyTimeframe, arg.CoursePhaseID, arg.SurveyStart, arg.SurveyDeadline)
	return err
}
