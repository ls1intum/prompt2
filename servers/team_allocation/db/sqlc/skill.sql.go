// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: skill.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSkill = `-- name: CreateSkill :exec
INSERT INTO skill (id, name, course_phase_id)
VALUES ($1, $2, $3)
`

type CreateSkillParams struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) error {
	_, err := q.db.Exec(ctx, createSkill, arg.ID, arg.Name, arg.CoursePhaseID)
	return err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skill
WHERE id = $1
AND course_phase_id = $2
`

type DeleteSkillParams struct {
	ID            uuid.UUID `json:"id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) DeleteSkill(ctx context.Context, arg DeleteSkillParams) error {
	_, err := q.db.Exec(ctx, deleteSkill, arg.ID, arg.CoursePhaseID)
	return err
}

const getSkillsByCoursePhase = `-- name: GetSkillsByCoursePhase :many
SELECT id, course_phase_id, name
FROM skill
WHERE course_phase_id = $1
ORDER BY name
`

func (q *Queries) GetSkillsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getSkillsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.CoursePhaseID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :exec
UPDATE skill
SET name = $3
WHERE id = $1
AND course_phase_id = $2
`

type UpdateSkillParams struct {
	ID            uuid.UUID `json:"id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
	Name          string    `json:"name"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) error {
	_, err := q.db.Exec(ctx, updateSkill, arg.ID, arg.CoursePhaseID, arg.Name)
	return err
}
