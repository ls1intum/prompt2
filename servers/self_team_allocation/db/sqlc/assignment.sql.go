// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: assignment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrUpdateAssignment = `-- name: CreateOrUpdateAssignment :exec
INSERT INTO assignments AS a (
  id,
  course_participation_id,
  student_full_name,
  team_id,
  course_phase_id,
  created_at,
  updated_at
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  CURRENT_TIMESTAMP,
  CURRENT_TIMESTAMP
)
ON CONFLICT ON CONSTRAINT assignments_participation_phase_uk
  DO UPDATE
SET team_id = EXCLUDED.team_id,
  updated_at = CURRENT_TIMESTAMP
`

type CreateOrUpdateAssignmentParams struct {
	ID                    uuid.UUID `json:"id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	StudentFullName       string    `json:"student_full_name"`
	TeamID                uuid.UUID `json:"team_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateOrUpdateAssignment(ctx context.Context, arg CreateOrUpdateAssignmentParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAssignment,
		arg.ID,
		arg.CourseParticipationID,
		arg.StudentFullName,
		arg.TeamID,
		arg.CoursePhaseID,
	)
	return err
}

const deleteAssignment = `-- name: DeleteAssignment :exec
DELETE FROM assignments
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND team_id = $3
`

type DeleteAssignmentParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	TeamID                uuid.UUID `json:"team_id"`
}

func (q *Queries) DeleteAssignment(ctx context.Context, arg DeleteAssignmentParams) error {
	_, err := q.db.Exec(ctx, deleteAssignment, arg.CourseParticipationID, arg.CoursePhaseID, arg.TeamID)
	return err
}
