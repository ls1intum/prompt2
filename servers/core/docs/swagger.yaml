basePath: /api/
definitions:
  coursePhaseTypeDTO.CoursePhaseType:
    properties:
      baseUrl:
        type: string
      id:
        type: string
      initialPhase:
        type: boolean
      name:
        type: string
      providedParticipationOutputDTOs:
        items:
          $ref: '#/definitions/coursePhaseTypeDTO.ParticipationOutputDTO'
        type: array
      providedPhaseOutputDTOs:
        items:
          $ref: '#/definitions/coursePhaseTypeDTO.PhaseOutputDTO'
        type: array
      requiredParticipationInputDTOs:
        items:
          $ref: '#/definitions/coursePhaseTypeDTO.ParticipationInputDTO'
        type: array
      requiredPhaseInputDTOs:
        items:
          $ref: '#/definitions/coursePhaseTypeDTO.PhaseInputDTO'
        type: array
    type: object
  coursePhaseTypeDTO.ParticipationInputDTO:
    properties:
      coursePhaseTypeID:
        type: string
      dtoName:
        type: string
      id:
        type: string
      specification:
        allOf:
        - $ref: '#/definitions/meta.MetaData'
        description: the specification follows the same structure as the meta.MetaData
    type: object
  coursePhaseTypeDTO.ParticipationOutputDTO:
    properties:
      coursePhaseTypeID:
        type: string
      dtoName:
        type: string
      endpointPath:
        type: string
      id:
        type: string
      specification:
        allOf:
        - $ref: '#/definitions/meta.MetaData'
        description: the specification follows the same structure as the meta.MetaData
      versionNumber:
        type: integer
    type: object
  coursePhaseTypeDTO.PhaseInputDTO:
    properties:
      coursePhaseTypeID:
        type: string
      dtoName:
        type: string
      id:
        type: string
      specification:
        allOf:
        - $ref: '#/definitions/meta.MetaData'
        description: the specification follows the same structure as the meta.MetaData
    type: object
  coursePhaseTypeDTO.PhaseOutputDTO:
    properties:
      coursePhaseTypeID:
        type: string
      dtoName:
        type: string
      endpointPath:
        type: string
      id:
        type: string
      specification:
        allOf:
        - $ref: '#/definitions/meta.MetaData'
        description: the specification follows the same structure as the meta.MetaData
      versionNumber:
        type: integer
    type: object
  db.Gender:
    enum:
    - male
    - female
    - diverse
    - prefer_not_to_say
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
    - GenderDiverse
    - GenderPreferNotToSay
  db.PassStatus:
    enum:
    - passed
    - failed
    - not_assessed
    type: string
    x-enum-varnames:
    - PassStatusPassed
    - PassStatusFailed
    - PassStatusNotAssessed
  db.StudyDegree:
    enum:
    - bachelor
    - master
    type: string
    x-enum-varnames:
    - StudyDegreeBachelor
    - StudyDegreeMaster
  keycloakRealmDTO.AddStudentsToGroup:
    properties:
      studentsToAdd:
        items:
          type: string
        type: array
    type: object
  keycloakRealmDTO.AddStudentsToGroupResponse:
    properties:
      failedToAddStudentIDs:
        items:
          type: string
        type: array
      succeededToAddStudentIDs:
        items:
          type: string
        type: array
    type: object
  keycloakRealmDTO.CreateGroup:
    properties:
      groupName:
        type: string
    type: object
  keycloakRealmDTO.GroupMembers:
    properties:
      nonStudents:
        items:
          $ref: '#/definitions/keycloakRealmDTO.KeycloakUser'
        type: array
      students:
        items:
          $ref: '#/definitions/studentDTO.Student'
        type: array
    type: object
  keycloakRealmDTO.KeycloakUser:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
    type: object
  mailingDTO.MailingReport:
    properties:
      failedEmails:
        items:
          type: string
        type: array
      successfulEmails:
        items:
          type: string
        type: array
    type: object
  mailingDTO.SendStatusMail:
    properties:
      statusMailToBeSend:
        $ref: '#/definitions/db.PassStatus'
    type: object
  meta.MetaData:
    additionalProperties: true
    type: object
  studentDTO.CreateStudent:
    properties:
      currentSemester:
        type: integer
      email:
        type: string
      firstName:
        type: string
      gender:
        $ref: '#/definitions/db.Gender'
      hasUniversityAccount:
        type: boolean
      id:
        type: string
      lastName:
        type: string
      matriculationNumber:
        type: string
      nationality:
        type: string
      studyDegree:
        $ref: '#/definitions/db.StudyDegree'
      studyProgram:
        type: string
      universityLogin:
        type: string
    type: object
  studentDTO.Student:
    properties:
      currentSemester:
        type: integer
      email:
        type: string
      firstName:
        type: string
      gender:
        $ref: '#/definitions/db.Gender'
      hasUniversityAccount:
        type: boolean
      id:
        type: string
      lastName:
        type: string
      matriculationNumber:
        type: string
      nationality:
        type: string
      studyDegree:
        $ref: '#/definitions/db.StudyDegree'
      studyProgram:
        type: string
      universityLogin:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        example: Something went wrong
        type: string
    type: object
externalDocs:
  description: PROMPT Documentation
  url: https://ls1intum.github.io/prompt2/
host: localhost:8080
info:
  contact: {}
  description: This is a core sever of PROMPT.
  title: PROMPT Core API
  version: "1.0"
paths:
  /course_phase_types:
    get:
      description: Get a list of all available course phase types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coursePhaseTypeDTO.CoursePhaseType'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all course phase types
      tags:
      - course_phase_types
  /keycloak/{courseID}/group:
    put:
      consumes:
      - application/json
      description: Create a new custom group for a course
      parameters:
      - description: Course UUID
        in: path
        name: courseID
        required: true
        type: string
      - description: Group name to create
        in: body
        name: newGroupName
        required: true
        schema:
          $ref: '#/definitions/keycloakRealmDTO.CreateGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a custom group
      tags:
      - keycloak
  /keycloak/{courseID}/group/{groupName}/students:
    get:
      description: Get all students in a specific group for a course
      parameters:
      - description: Course UUID
        in: path
        name: courseID
        required: true
        type: string
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/keycloakRealmDTO.GroupMembers'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get students in a group
      tags:
      - keycloak
    put:
      consumes:
      - application/json
      description: Add students to a custom group for a course
      parameters:
      - description: Course UUID
        in: path
        name: courseID
        required: true
        type: string
      - description: Group name
        in: path
        name: groupName
        required: true
        type: string
      - description: Students to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/keycloakRealmDTO.AddStudentsToGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/keycloakRealmDTO.AddStudentsToGroupResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add students to a custom group
      tags:
      - keycloak
  /keycloak/{courseID}/group/editor/students:
    put:
      consumes:
      - application/json
      description: Add students to the editor group for a course
      parameters:
      - description: Course UUID
        in: path
        name: courseID
        required: true
        type: string
      - description: Students to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/keycloakRealmDTO.AddStudentsToGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/keycloakRealmDTO.AddStudentsToGroupResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add students to the editor group
      tags:
      - keycloak
  /mailing/{coursePhaseID}:
    put:
      consumes:
      - application/json
      description: Sends a status mail for a given course phase ID
      parameters:
      - description: Course Phase UUID
        in: path
        name: coursePhaseID
        required: true
        type: string
      - description: Mailing info
        in: body
        name: mailingInfo
        required: true
        schema:
          $ref: '#/definitions/mailingDTO.SendStatusMail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mailingDTO.MailingReport'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Manually trigger status mail for a course phase
      tags:
      - mailing
  /students/:
    get:
      description: Get a list of all students
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/studentDTO.Student'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all students
      tags:
      - students
    post:
      consumes:
      - application/json
      description: Create a new student
      parameters:
      - description: Student to create
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/studentDTO.CreateStudent'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/studentDTO.Student'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a student
      tags:
      - students
  /students/{uuid}:
    get:
      description: Get a student by UUID
      parameters:
      - description: Student UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/studentDTO.Student'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get student by ID
      tags:
      - students
    put:
      consumes:
      - application/json
      description: Update an existing student by UUID
      parameters:
      - description: Student UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Student to update
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/studentDTO.CreateStudent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/studentDTO.Student'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a student
      tags:
      - students
  /students/search/{searchString}:
    get:
      description: Search students by a search string
      parameters:
      - description: Search string
        in: path
        name: searchString
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/studentDTO.Student'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Search students
      tags:
      - students
swagger: "2.0"
