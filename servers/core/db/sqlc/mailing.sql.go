// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mailing.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getConfirmationMailingInformation = `-- name: GetConfirmationMailingInformation :one
SELECT 
    s.first_name,
    s.last_name,
    s.email,
    s.matriculation_number,
    s.university_login,
    s.study_degree,
    s.current_semester,
    s.study_program,
    c.name AS course_name,
    c.start_date AS course_start_date,
    c.end_date AS course_end_date,
    (p.restricted_data->>'applicationEndDate')::text AS application_end_date,
    COALESCE((p.restricted_data->'mailingSettings'->>'confirmationMailSubject'), '')::text AS confirmation_mail_subject,
    COALESCE((p.restricted_data->'mailingSettings'->>'confirmationMailContent'), '')::text AS confirmation_mail_content,
    COALESCE((p.restricted_data->'mailingSettings'->>'sendConfirmationMail')::boolean, false)::boolean AS send_confirmation_mail
FROM 
    course_phase_participation cpp
JOIN 
    course_participation cp ON cpp.course_participation_id = cp.id
JOIN 
    student s ON cp.student_id = s.id
JOIN 
    course_phase p ON cpp.course_phase_id = p.id
JOIN 
    course c ON p.course_id = c.id
WHERE 
    cpp.course_participation_id = $1
    AND cpp.course_phase_id = $2
`

type GetConfirmationMailingInformationParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

type GetConfirmationMailingInformationRow struct {
	FirstName               pgtype.Text `json:"first_name"`
	LastName                pgtype.Text `json:"last_name"`
	Email                   pgtype.Text `json:"email"`
	MatriculationNumber     pgtype.Text `json:"matriculation_number"`
	UniversityLogin         pgtype.Text `json:"university_login"`
	StudyDegree             StudyDegree `json:"study_degree"`
	CurrentSemester         pgtype.Int4 `json:"current_semester"`
	StudyProgram            pgtype.Text `json:"study_program"`
	CourseName              string      `json:"course_name"`
	CourseStartDate         pgtype.Date `json:"course_start_date"`
	CourseEndDate           pgtype.Date `json:"course_end_date"`
	ApplicationEndDate      string      `json:"application_end_date"`
	ConfirmationMailSubject string      `json:"confirmation_mail_subject"`
	ConfirmationMailContent string      `json:"confirmation_mail_content"`
	SendConfirmationMail    bool        `json:"send_confirmation_mail"`
}

func (q *Queries) GetConfirmationMailingInformation(ctx context.Context, arg GetConfirmationMailingInformationParams) (GetConfirmationMailingInformationRow, error) {
	row := q.db.QueryRow(ctx, getConfirmationMailingInformation, arg.CourseParticipationID, arg.CoursePhaseID)
	var i GetConfirmationMailingInformationRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.StudyProgram,
		&i.CourseName,
		&i.CourseStartDate,
		&i.CourseEndDate,
		&i.ApplicationEndDate,
		&i.ConfirmationMailSubject,
		&i.ConfirmationMailContent,
		&i.SendConfirmationMail,
	)
	return i, err
}

const getCourseMailingSettingsForCoursePhaseID = `-- name: GetCourseMailingSettingsForCoursePhaseID :one
SELECT
    COALESCE((c.restricted_data->'mailingSettings'->>'replyToEmail')::text, '')::text AS reply_to_email,
    COALESCE((c.restricted_data->'mailingSettings'->>'replyToName')::text, '')::text AS reply_to_name,
    COALESCE((c.restricted_data->'mailingSettings'->>'ccAddresses')::jsonb, '[]')::jsonb AS cc_addresses,
    COALESCE((c.restricted_data->'mailingSettings'->>'bccAddresses')::jsonb, '[]')::json AS bcc_addresses
FROM 
  course c
INNER JOIN
  course_phase p ON c.id = p.course_id
WHERE
  p.id = $1
`

type GetCourseMailingSettingsForCoursePhaseIDRow struct {
	ReplyToEmail string `json:"reply_to_email"`
	ReplyToName  string `json:"reply_to_name"`
	CcAddresses  []byte `json:"cc_addresses"`
	BccAddresses []byte `json:"bcc_addresses"`
}

func (q *Queries) GetCourseMailingSettingsForCoursePhaseID(ctx context.Context, id uuid.UUID) (GetCourseMailingSettingsForCoursePhaseIDRow, error) {
	row := q.db.QueryRow(ctx, getCourseMailingSettingsForCoursePhaseID, id)
	var i GetCourseMailingSettingsForCoursePhaseIDRow
	err := row.Scan(
		&i.ReplyToEmail,
		&i.ReplyToName,
		&i.CcAddresses,
		&i.BccAddresses,
	)
	return i, err
}

const getFailedMailingInformation = `-- name: GetFailedMailingInformation :one
SELECT
    c.name AS course_name,
    c.start_date AS course_start_date,
    c.end_date AS course_end_date,
    COALESCE((p.restricted_data->'mailingSettings'->>'failedMailSubject'), '')::text AS mail_subject,
    COALESCE((p.restricted_data->'mailingSettings'->>'failedMailContent'), '')::text AS mail_content
FROM
    course_phase p
JOIN
    course c ON p.course_id = c.id
WHERE
    p.id = $1
`

type GetFailedMailingInformationRow struct {
	CourseName      string      `json:"course_name"`
	CourseStartDate pgtype.Date `json:"course_start_date"`
	CourseEndDate   pgtype.Date `json:"course_end_date"`
	MailSubject     string      `json:"mail_subject"`
	MailContent     string      `json:"mail_content"`
}

func (q *Queries) GetFailedMailingInformation(ctx context.Context, id uuid.UUID) (GetFailedMailingInformationRow, error) {
	row := q.db.QueryRow(ctx, getFailedMailingInformation, id)
	var i GetFailedMailingInformationRow
	err := row.Scan(
		&i.CourseName,
		&i.CourseStartDate,
		&i.CourseEndDate,
		&i.MailSubject,
		&i.MailContent,
	)
	return i, err
}

const getParticipantMailingInformation = `-- name: GetParticipantMailingInformation :many
SELECT
    s.first_name,
    s.last_name,
    s.email,
    s.matriculation_number,
    s.university_login,
    s.study_degree,
    s.current_semester,
    s.study_program
FROM
    course_phase p
JOIN
    course_phase_participation cpp ON p.id = cpp.course_phase_id
JOIN
    course_participation cp ON cpp.course_participation_id = cp.id
JOIN
    student s ON cp.student_id = s.id
WHERE
    p.id = $1
AND 
    cpp.pass_status = $2
`

type GetParticipantMailingInformationParams struct {
	ID         uuid.UUID      `json:"id"`
	PassStatus NullPassStatus `json:"pass_status"`
}

type GetParticipantMailingInformationRow struct {
	FirstName           pgtype.Text `json:"first_name"`
	LastName            pgtype.Text `json:"last_name"`
	Email               pgtype.Text `json:"email"`
	MatriculationNumber pgtype.Text `json:"matriculation_number"`
	UniversityLogin     pgtype.Text `json:"university_login"`
	StudyDegree         StudyDegree `json:"study_degree"`
	CurrentSemester     pgtype.Int4 `json:"current_semester"`
	StudyProgram        pgtype.Text `json:"study_program"`
}

func (q *Queries) GetParticipantMailingInformation(ctx context.Context, arg GetParticipantMailingInformationParams) ([]GetParticipantMailingInformationRow, error) {
	rows, err := q.db.Query(ctx, getParticipantMailingInformation, arg.ID, arg.PassStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetParticipantMailingInformationRow
	for rows.Next() {
		var i GetParticipantMailingInformationRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.MatriculationNumber,
			&i.UniversityLogin,
			&i.StudyDegree,
			&i.CurrentSemester,
			&i.StudyProgram,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPassedMailingInformation = `-- name: GetPassedMailingInformation :one
SELECT
    c.name AS course_name,
    c.start_date AS course_start_date,
    c.end_date AS course_end_date,
    COALESCE((p.restricted_data->'mailingSettings'->>'passedMailSubject'), '')::text AS mail_subject,
    COALESCE((p.restricted_data->'mailingSettings'->>'passedMailContent'), '')::text AS mail_content
FROM
    course_phase p
JOIN
    course c ON p.course_id = c.id
WHERE
    p.id = $1
`

type GetPassedMailingInformationRow struct {
	CourseName      string      `json:"course_name"`
	CourseStartDate pgtype.Date `json:"course_start_date"`
	CourseEndDate   pgtype.Date `json:"course_end_date"`
	MailSubject     string      `json:"mail_subject"`
	MailContent     string      `json:"mail_content"`
}

func (q *Queries) GetPassedMailingInformation(ctx context.Context, id uuid.UUID) (GetPassedMailingInformationRow, error) {
	row := q.db.QueryRow(ctx, getPassedMailingInformation, id)
	var i GetPassedMailingInformationRow
	err := row.Scan(
		&i.CourseName,
		&i.CourseStartDate,
		&i.CourseEndDate,
		&i.MailSubject,
		&i.MailContent,
	)
	return i, err
}
