// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: students.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO student (id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified
`

type CreateStudentParams struct {
	ID                   uuid.UUID   `json:"id"`
	FirstName            pgtype.Text `json:"first_name"`
	LastName             pgtype.Text `json:"last_name"`
	Email                pgtype.Text `json:"email"`
	MatriculationNumber  pgtype.Text `json:"matriculation_number"`
	UniversityLogin      pgtype.Text `json:"university_login"`
	HasUniversityAccount pgtype.Bool `json:"has_university_account"`
	Gender               Gender      `json:"gender"`
	Nationality          pgtype.Text `json:"nationality"`
	StudyProgram         pgtype.Text `json:"study_program"`
	StudyDegree          StudyDegree `json:"study_degree"`
	CurrentSemester      pgtype.Int4 `json:"current_semester"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.MatriculationNumber,
		arg.UniversityLogin,
		arg.HasUniversityAccount,
		arg.Gender,
		arg.Nationality,
		arg.StudyProgram,
		arg.StudyDegree,
		arg.CurrentSemester,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.HasUniversityAccount,
		&i.Gender,
		&i.Nationality,
		&i.StudyProgram,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.LastModified,
	)
	return i, err
}

const getAllStudents = `-- name: GetAllStudents :many
SELECT id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified FROM student
`

func (q *Queries) GetAllStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.MatriculationNumber,
			&i.UniversityLogin,
			&i.HasUniversityAccount,
			&i.Gender,
			&i.Nationality,
			&i.StudyProgram,
			&i.StudyDegree,
			&i.CurrentSemester,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudent = `-- name: GetStudent :one
SELECT id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified FROM student
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRow(ctx, getStudent, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.HasUniversityAccount,
		&i.Gender,
		&i.Nationality,
		&i.StudyProgram,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.LastModified,
	)
	return i, err
}

const getStudentByCourseParticipationID = `-- name: GetStudentByCourseParticipationID :one
SELECT s.id, s.first_name, s.last_name, s.email, s.matriculation_number, s.university_login, s.has_university_account, s.gender, s.nationality, s.study_program, s.study_degree, s.current_semester, s.last_modified
FROM student s
INNER JOIN course_participation cp ON s.id = cp.student_id
WHERE cp.id = $1
`

func (q *Queries) GetStudentByCourseParticipationID(ctx context.Context, id uuid.UUID) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentByCourseParticipationID, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.HasUniversityAccount,
		&i.Gender,
		&i.Nationality,
		&i.StudyProgram,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.LastModified,
	)
	return i, err
}

const getStudentByEmail = `-- name: GetStudentByEmail :one
SELECT id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified FROM student
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetStudentByEmail(ctx context.Context, email pgtype.Text) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentByEmail, email)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.HasUniversityAccount,
		&i.Gender,
		&i.Nationality,
		&i.StudyProgram,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.LastModified,
	)
	return i, err
}

const getStudentEmails = `-- name: GetStudentEmails :many
SELECT id, email
FROM student
WHERE id = ANY($1::uuid[])
`

type GetStudentEmailsRow struct {
	ID    uuid.UUID   `json:"id"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) GetStudentEmails(ctx context.Context, dollar_1 []uuid.UUID) ([]GetStudentEmailsRow, error) {
	rows, err := q.db.Query(ctx, getStudentEmails, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentEmailsRow
	for rows.Next() {
		var i GetStudentEmailsRow
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentUniversityLogins = `-- name: GetStudentUniversityLogins :many
SELECT id, university_login
FROM student
WHERE id = ANY($1::uuid[])
`

type GetStudentUniversityLoginsRow struct {
	ID              uuid.UUID   `json:"id"`
	UniversityLogin pgtype.Text `json:"university_login"`
}

func (q *Queries) GetStudentUniversityLogins(ctx context.Context, dollar_1 []uuid.UUID) ([]GetStudentUniversityLoginsRow, error) {
	rows, err := q.db.Query(ctx, getStudentUniversityLogins, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentUniversityLoginsRow
	for rows.Next() {
		var i GetStudentUniversityLoginsRow
		if err := rows.Scan(&i.ID, &i.UniversityLogin); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsByEmail = `-- name: GetStudentsByEmail :many
SELECT id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified FROM student
WHERE email = ANY($1::text[])
`

func (q *Queries) GetStudentsByEmail(ctx context.Context, dollar_1 []string) ([]Student, error) {
	rows, err := q.db.Query(ctx, getStudentsByEmail, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.MatriculationNumber,
			&i.UniversityLogin,
			&i.HasUniversityAccount,
			&i.Gender,
			&i.Nationality,
			&i.StudyProgram,
			&i.StudyDegree,
			&i.CurrentSemester,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchStudents = `-- name: SearchStudents :many
SELECT id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified
FROM student
WHERE (first_name || ' ' || last_name) ILIKE '%' || $1 || '%'
   OR first_name ILIKE '%' || $1 || '%'
   OR last_name ILIKE '%' || $1 || '%'
   OR email ILIKE '%' || $1 || '%'
   OR matriculation_number ILIKE '%' || $1 || '%'
   OR university_login ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchStudents(ctx context.Context, dollar_1 pgtype.Text) ([]Student, error) {
	rows, err := q.db.Query(ctx, searchStudents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.MatriculationNumber,
			&i.UniversityLogin,
			&i.HasUniversityAccount,
			&i.Gender,
			&i.Nationality,
			&i.StudyProgram,
			&i.StudyDegree,
			&i.CurrentSemester,
			&i.LastModified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE student
SET first_name = $2,
    last_name = $3,
    email = $4,
    matriculation_number = $5,
    university_login = $6,
    has_university_account = $7,
    gender = $8,
    nationality = $9,
    study_program = $10,
    study_degree = $11,
    current_semester = $12
WHERE id = $1
RETURNING id, first_name, last_name, email, matriculation_number, university_login, has_university_account, gender, nationality, study_program, study_degree, current_semester, last_modified
`

type UpdateStudentParams struct {
	ID                   uuid.UUID   `json:"id"`
	FirstName            pgtype.Text `json:"first_name"`
	LastName             pgtype.Text `json:"last_name"`
	Email                pgtype.Text `json:"email"`
	MatriculationNumber  pgtype.Text `json:"matriculation_number"`
	UniversityLogin      pgtype.Text `json:"university_login"`
	HasUniversityAccount pgtype.Bool `json:"has_university_account"`
	Gender               Gender      `json:"gender"`
	Nationality          pgtype.Text `json:"nationality"`
	StudyProgram         pgtype.Text `json:"study_program"`
	StudyDegree          StudyDegree `json:"study_degree"`
	CurrentSemester      pgtype.Int4 `json:"current_semester"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, updateStudent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.MatriculationNumber,
		arg.UniversityLogin,
		arg.HasUniversityAccount,
		arg.Gender,
		arg.Nationality,
		arg.StudyProgram,
		arg.StudyDegree,
		arg.CurrentSemester,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.HasUniversityAccount,
		&i.Gender,
		&i.Nationality,
		&i.StudyProgram,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.LastModified,
	)
	return i, err
}
