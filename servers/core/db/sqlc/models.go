// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CourseType string

const (
	CourseTypeLecture         CourseType = "lecture"
	CourseTypeSeminar         CourseType = "seminar"
	CourseTypePracticalcourse CourseType = "practical course"
)

func (e *CourseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CourseType(s)
	case string:
		*e = CourseType(s)
	default:
		return fmt.Errorf("unsupported scan type for CourseType: %T", src)
	}
	return nil
}

type NullCourseType struct {
	CourseType CourseType `json:"course_type"`
	Valid      bool       `json:"valid"` // Valid is true if CourseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCourseType) Scan(value interface{}) error {
	if value == nil {
		ns.CourseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CourseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCourseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CourseType), nil
}

type Gender string

const (
	GenderMale           Gender = "male"
	GenderFemale         Gender = "female"
	GenderDiverse        Gender = "diverse"
	GenderPreferNotToSay Gender = "prefer_not_to_say"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender `json:"gender"`
	Valid  bool   `json:"valid"` // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type PassStatus string

const (
	PassStatusPassed      PassStatus = "passed"
	PassStatusFailed      PassStatus = "failed"
	PassStatusNotAssessed PassStatus = "not_assessed"
)

func (e *PassStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PassStatus(s)
	case string:
		*e = PassStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PassStatus: %T", src)
	}
	return nil
}

type NullPassStatus struct {
	PassStatus PassStatus `json:"pass_status"`
	Valid      bool       `json:"valid"` // Valid is true if PassStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPassStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PassStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PassStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPassStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PassStatus), nil
}

type StudyDegree string

const (
	StudyDegreeBachelor StudyDegree = "bachelor"
	StudyDegreeMaster   StudyDegree = "master"
)

func (e *StudyDegree) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudyDegree(s)
	case string:
		*e = StudyDegree(s)
	default:
		return fmt.Errorf("unsupported scan type for StudyDegree: %T", src)
	}
	return nil
}

type NullStudyDegree struct {
	StudyDegree StudyDegree `json:"study_degree"`
	Valid       bool        `json:"valid"` // Valid is true if StudyDegree is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudyDegree) Scan(value interface{}) error {
	if value == nil {
		ns.StudyDegree, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudyDegree.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudyDegree) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudyDegree), nil
}

type ApplicationAnswerMultiSelect struct {
	ID                    uuid.UUID `json:"id"`
	ApplicationQuestionID uuid.UUID `json:"application_question_id"`
	Answer                []string  `json:"answer"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
}

type ApplicationAnswerText struct {
	ID                    uuid.UUID   `json:"id"`
	ApplicationQuestionID uuid.UUID   `json:"application_question_id"`
	Answer                pgtype.Text `json:"answer"`
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
}

type ApplicationAssessment struct {
	ID                    uuid.UUID   `json:"id"`
	Score                 pgtype.Int4 `json:"score"`
	CoursePhaseID         uuid.UUID   `json:"course_phase_id"`
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
}

type ApplicationQuestionMultiSelect struct {
	ID                       uuid.UUID   `json:"id"`
	CoursePhaseID            uuid.UUID   `json:"course_phase_id"`
	Title                    pgtype.Text `json:"title"`
	Description              pgtype.Text `json:"description"`
	Placeholder              pgtype.Text `json:"placeholder"`
	ErrorMessage             pgtype.Text `json:"error_message"`
	IsRequired               pgtype.Bool `json:"is_required"`
	MinSelect                pgtype.Int4 `json:"min_select"`
	MaxSelect                pgtype.Int4 `json:"max_select"`
	Options                  []string    `json:"options"`
	OrderNum                 pgtype.Int4 `json:"order_num"`
	AccessibleForOtherPhases pgtype.Bool `json:"accessible_for_other_phases"`
	AccessKey                pgtype.Text `json:"access_key"`
}

type ApplicationQuestionText struct {
	ID                       uuid.UUID   `json:"id"`
	CoursePhaseID            uuid.UUID   `json:"course_phase_id"`
	Title                    pgtype.Text `json:"title"`
	Description              pgtype.Text `json:"description"`
	Placeholder              pgtype.Text `json:"placeholder"`
	ValidationRegex          pgtype.Text `json:"validation_regex"`
	ErrorMessage             pgtype.Text `json:"error_message"`
	IsRequired               pgtype.Bool `json:"is_required"`
	AllowedLength            pgtype.Int4 `json:"allowed_length"`
	OrderNum                 pgtype.Int4 `json:"order_num"`
	AccessibleForOtherPhases pgtype.Bool `json:"accessible_for_other_phases"`
	AccessKey                pgtype.Text `json:"access_key"`
}

type Course struct {
	ID                  uuid.UUID   `json:"id"`
	Name                string      `json:"name"`
	StartDate           pgtype.Date `json:"start_date"`
	EndDate             pgtype.Date `json:"end_date"`
	SemesterTag         pgtype.Text `json:"semester_tag"`
	CourseType          CourseType  `json:"course_type"`
	Ects                pgtype.Int4 `json:"ects"`
	RestrictedData      []byte      `json:"restricted_data"`
	StudentReadableData []byte      `json:"student_readable_data"`
}

type CourseParticipation struct {
	ID        uuid.UUID `json:"id"`
	CourseID  uuid.UUID `json:"course_id"`
	StudentID uuid.UUID `json:"student_id"`
}

type CoursePhase struct {
	ID                  uuid.UUID   `json:"id"`
	CourseID            uuid.UUID   `json:"course_id"`
	Name                pgtype.Text `json:"name"`
	RestrictedData      []byte      `json:"restricted_data"`
	IsInitialPhase      bool        `json:"is_initial_phase"`
	CoursePhaseTypeID   uuid.UUID   `json:"course_phase_type_id"`
	StudentReadableData []byte      `json:"student_readable_data"`
}

type CoursePhaseGraph struct {
	FromCoursePhaseID uuid.UUID `json:"from_course_phase_id"`
	ToCoursePhaseID   uuid.UUID `json:"to_course_phase_id"`
}

type CoursePhaseParticipation struct {
	CourseParticipationID uuid.UUID        `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID        `json:"course_phase_id"`
	RestrictedData        []byte           `json:"restricted_data"`
	PassStatus            NullPassStatus   `json:"pass_status"`
	LastModified          pgtype.Timestamp `json:"last_modified"`
	StudentReadableData   []byte           `json:"student_readable_data"`
}

type CoursePhaseType struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	InitialPhase bool      `json:"initial_phase"`
	BaseUrl      string    `json:"base_url"`
}

type CoursePhaseTypeProvidedOutputDto struct {
	ID                uuid.UUID `json:"id"`
	CoursePhaseTypeID uuid.UUID `json:"course_phase_type_id"`
	DtoName           string    `json:"dto_name"`
	VersionNumber     int32     `json:"version_number"`
	EndpointPath      string    `json:"endpoint_path"`
	Specification     []byte    `json:"specification"`
}

type CoursePhaseTypeRequiredInputDto struct {
	ID                uuid.UUID `json:"id"`
	CoursePhaseTypeID uuid.UUID `json:"course_phase_type_id"`
	DtoName           string    `json:"dto_name"`
	Specification     []byte    `json:"specification"`
}

type MetaDataDependencyGraph struct {
	FromCoursePhaseID    uuid.UUID `json:"from_course_phase_id"`
	ToCoursePhaseID      uuid.UUID `json:"to_course_phase_id"`
	FromCoursePhaseDtoID uuid.UUID `json:"from_course_phase_dto_id"`
	ToCoursePhaseDtoID   uuid.UUID `json:"to_course_phase_dto_id"`
}

type Student struct {
	ID                   uuid.UUID        `json:"id"`
	FirstName            pgtype.Text      `json:"first_name"`
	LastName             pgtype.Text      `json:"last_name"`
	Email                pgtype.Text      `json:"email"`
	MatriculationNumber  pgtype.Text      `json:"matriculation_number"`
	UniversityLogin      pgtype.Text      `json:"university_login"`
	HasUniversityAccount pgtype.Bool      `json:"has_university_account"`
	Gender               Gender           `json:"gender"`
	Nationality          pgtype.Text      `json:"nationality"`
	StudyProgram         pgtype.Text      `json:"study_program"`
	StudyDegree          StudyDegree      `json:"study_degree"`
	CurrentSemester      pgtype.Int4      `json:"current_semester"`
	LastModified         pgtype.Timestamp `json:"last_modified"`
}
