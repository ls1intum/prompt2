// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tutor.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTutor = `-- name: CreateTutor :exec
INSERT INTO tutor (course_phase_id, id, first_name, last_name, email, matriculation_number, university_login)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateTutorParams struct {
	CoursePhaseID       uuid.UUID `json:"course_phase_id"`
	ID                  uuid.UUID `json:"id"`
	FirstName           string    `json:"first_name"`
	LastName            string    `json:"last_name"`
	Email               string    `json:"email"`
	MatriculationNumber string    `json:"matriculation_number"`
	UniversityLogin     string    `json:"university_login"`
}

func (q *Queries) CreateTutor(ctx context.Context, arg CreateTutorParams) error {
	_, err := q.db.Exec(ctx, createTutor,
		arg.CoursePhaseID,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.MatriculationNumber,
		arg.UniversityLogin,
	)
	return err
}

const getAllTutors = `-- name: GetAllTutors :many
SELECT course_phase_id, id, first_name, last_name, email, matriculation_number, university_login, gitlab_username 
FROM tutor
WHERE course_phase_id = $1
`

func (q *Queries) GetAllTutors(ctx context.Context, coursePhaseID uuid.UUID) ([]Tutor, error) {
	rows, err := q.db.Query(ctx, getAllTutors, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tutor
	for rows.Next() {
		var i Tutor
		if err := rows.Scan(
			&i.CoursePhaseID,
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.MatriculationNumber,
			&i.UniversityLogin,
			&i.GitlabUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTutorGitlabUsername = `-- name: UpdateTutorGitlabUsername :exec
UPDATE tutor
SET gitlab_username = $3
WHERE id = $1
AND course_phase_id = $2
`

type UpdateTutorGitlabUsernameParams struct {
	ID             uuid.UUID   `json:"id"`
	CoursePhaseID  uuid.UUID   `json:"course_phase_id"`
	GitlabUsername pgtype.Text `json:"gitlab_username"`
}

func (q *Queries) UpdateTutorGitlabUsername(ctx context.Context, arg UpdateTutorGitlabUsernameParams) error {
	_, err := q.db.Exec(ctx, updateTutorGitlabUsername, arg.ID, arg.CoursePhaseID, arg.GitlabUsername)
	return err
}
