// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: developerProfile.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDeveloperProfile = `-- name: CreateDeveloperProfile :exec
INSERT INTO developer_profile (course_participation_id, course_phase_id, has_macbook, iphone_uuid, ipad_uuid, apple_watch_uuid)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateDeveloperProfileParams struct {
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID   `json:"course_phase_id"`
	HasMacbook            bool        `json:"has_macbook"`
	IphoneUuid            pgtype.UUID `json:"iphone_uuid"`
	IpadUuid              pgtype.UUID `json:"ipad_uuid"`
	AppleWatchUuid        pgtype.UUID `json:"apple_watch_uuid"`
}

func (q *Queries) CreateDeveloperProfile(ctx context.Context, arg CreateDeveloperProfileParams) error {
	_, err := q.db.Exec(ctx, createDeveloperProfile,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.HasMacbook,
		arg.IphoneUuid,
		arg.IpadUuid,
		arg.AppleWatchUuid,
	)
	return err
}

const getDeveloperForm = `-- name: GetDeveloperForm :many
SELECT course_phase_id, course_participation_id, has_macbook, iphone_uuid, ipad_uuid, apple_watch_uuid 
FROM developer_profile
WHERE course_participation_id = $1
AND course_phase_id = $2
`

type GetDeveloperFormParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) GetDeveloperForm(ctx context.Context, arg GetDeveloperFormParams) ([]DeveloperProfile, error) {
	rows, err := q.db.Query(ctx, getDeveloperForm, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperProfile
	for rows.Next() {
		var i DeveloperProfile
		if err := rows.Scan(
			&i.CoursePhaseID,
			&i.CourseParticipationID,
			&i.HasMacbook,
			&i.IphoneUuid,
			&i.IpadUuid,
			&i.AppleWatchUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
