// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: devices.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getDevicesForCourseParticipation = `-- name: GetDevicesForCourseParticipation :one
SELECT array_remove(
  ARRAY[
    CASE WHEN has_macbook       THEN 'Mac' END,
    CASE WHEN iphone_udid       IS NOT NULL THEN 'IPhone' END,
    CASE WHEN ipad_udid         IS NOT NULL THEN 'IPad' END,
    CASE WHEN apple_watch_udid  IS NOT NULL THEN 'Watch' END
  ]::text[],
  NULL
)::text[] AS devices
FROM developer_profile
WHERE course_phase_id = $1
  AND course_participation_id = $2
`

type GetDevicesForCourseParticipationParams struct {
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
}

func (q *Queries) GetDevicesForCourseParticipation(ctx context.Context, arg GetDevicesForCourseParticipationParams) ([]string, error) {
	row := q.db.QueryRow(ctx, getDevicesForCourseParticipation, arg.CoursePhaseID, arg.CourseParticipationID)
	var devices []string
	err := row.Scan(&devices)
	return devices, err
}

const getDevicesForCoursePhase = `-- name: GetDevicesForCoursePhase :many
SELECT course_participation_id, array_remove(
  ARRAY[
    CASE WHEN has_macbook       THEN 'Mac' END,
    CASE WHEN iphone_udid       IS NOT NULL   THEN 'IPhone' END,
    CASE WHEN ipad_udid         IS NOT NULL   THEN 'IPad' END,
    CASE WHEN apple_watch_udid  IS NOT NULL   THEN 'Watch' END
  ]::text[],
  NULL
)::text[] AS devices
FROM developer_profile
WHERE course_phase_id = $1
`

type GetDevicesForCoursePhaseRow struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	Devices               []string  `json:"devices"`
}

func (q *Queries) GetDevicesForCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]GetDevicesForCoursePhaseRow, error) {
	rows, err := q.db.Query(ctx, getDevicesForCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesForCoursePhaseRow
	for rows.Next() {
		var i GetDevicesForCoursePhaseRow
		if err := rows.Scan(&i.CourseParticipationID, &i.Devices); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
