// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appleDev.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addAppleError = `-- name: AddAppleError :exec
INSERT INTO student_apple_processes (course_phase_id, course_participation_id, apple_success, error_message)
VALUES ($1, $2, false, $3)
ON CONFLICT (course_phase_id, course_participation_id)
DO UPDATE SET 
  apple_success = EXCLUDED.apple_success,
  error_message = EXCLUDED.error_message,
  updated_at = CURRENT_TIMESTAMP
`

type AddAppleErrorParams struct {
	CoursePhaseID         uuid.UUID   `json:"course_phase_id"`
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
	ErrorMessage          pgtype.Text `json:"error_message"`
}

func (q *Queries) AddAppleError(ctx context.Context, arg AddAppleErrorParams) error {
	_, err := q.db.Exec(ctx, addAppleError, arg.CoursePhaseID, arg.CourseParticipationID, arg.ErrorMessage)
	return err
}

const addAppleStatus = `-- name: AddAppleStatus :exec
INSERT INTO student_apple_processes (course_phase_id, course_participation_id, apple_success)
VALUES ($1, $2, true)
ON CONFLICT (course_phase_id, course_participation_id)
DO UPDATE SET 
  apple_success = EXCLUDED.apple_success,
  error_message = NULL,
  updated_at = CURRENT_TIMESTAMP
`

type AddAppleStatusParams struct {
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
}

func (q *Queries) AddAppleStatus(ctx context.Context, arg AddAppleStatusParams) error {
	_, err := q.db.Exec(ctx, addAppleStatus, arg.CoursePhaseID, arg.CourseParticipationID)
	return err
}

const getAllAppleStatus = `-- name: GetAllAppleStatus :many
SELECT course_phase_id, course_participation_id, apple_success, error_message, created_at, updated_at FROM student_apple_processes WHERE course_phase_id = $1
`

func (q *Queries) GetAllAppleStatus(ctx context.Context, coursePhaseID uuid.UUID) ([]StudentAppleProcess, error) {
	rows, err := q.db.Query(ctx, getAllAppleStatus, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentAppleProcess
	for rows.Next() {
		var i StudentAppleProcess
		if err := rows.Scan(
			&i.CoursePhaseID,
			&i.CourseParticipationID,
			&i.AppleSuccess,
			&i.ErrorMessage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
