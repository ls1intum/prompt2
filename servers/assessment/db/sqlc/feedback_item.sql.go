// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feedback_item.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countFeedbackItemsForStudentInPhase = `-- name: CountFeedbackItemsForStudentInPhase :one
SELECT COUNT(*) AS feedback_item_count
FROM feedback_items
WHERE course_participation_id = $1
  AND course_phase_id = $2
`

type CountFeedbackItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CountFeedbackItemsForStudentInPhase(ctx context.Context, arg CountFeedbackItemsForStudentInPhaseParams) (int64, error) {
	row := q.db.QueryRow(ctx, countFeedbackItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	var feedback_item_count int64
	err := row.Scan(&feedback_item_count)
	return feedback_item_count, err
}

const countNegativeFeedbackItemsForStudentInPhase = `-- name: CountNegativeFeedbackItemsForStudentInPhase :one
SELECT COUNT(*) AS negative_feedback_count
FROM feedback_items
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND feedback_type = 'negative'
`

type CountNegativeFeedbackItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CountNegativeFeedbackItemsForStudentInPhase(ctx context.Context, arg CountNegativeFeedbackItemsForStudentInPhaseParams) (int64, error) {
	row := q.db.QueryRow(ctx, countNegativeFeedbackItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	var negative_feedback_count int64
	err := row.Scan(&negative_feedback_count)
	return negative_feedback_count, err
}

const countPositiveFeedbackItemsForStudentInPhase = `-- name: CountPositiveFeedbackItemsForStudentInPhase :one
SELECT COUNT(*) AS positive_feedback_count
FROM feedback_items
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND feedback_type = 'positive'
`

type CountPositiveFeedbackItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CountPositiveFeedbackItemsForStudentInPhase(ctx context.Context, arg CountPositiveFeedbackItemsForStudentInPhaseParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPositiveFeedbackItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	var positive_feedback_count int64
	err := row.Scan(&positive_feedback_count)
	return positive_feedback_count, err
}

const createFeedbackItem = `-- name: CreateFeedbackItem :exec
INSERT INTO feedback_items (id,
                            feedback_type,
                            feedback_text,
                            course_participation_id,
                            course_phase_id,
                            author_course_participation_id)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateFeedbackItemParams struct {
	ID                          uuid.UUID    `json:"id"`
	FeedbackType                FeedbackType `json:"feedback_type"`
	FeedbackText                string       `json:"feedback_text"`
	CourseParticipationID       uuid.UUID    `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID    `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID    `json:"author_course_participation_id"`
}

func (q *Queries) CreateFeedbackItem(ctx context.Context, arg CreateFeedbackItemParams) error {
	_, err := q.db.Exec(ctx, createFeedbackItem,
		arg.ID,
		arg.FeedbackType,
		arg.FeedbackText,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.AuthorCourseParticipationID,
	)
	return err
}

const deleteFeedbackItem = `-- name: DeleteFeedbackItem :exec
DELETE
FROM feedback_items
WHERE id = $1
`

func (q *Queries) DeleteFeedbackItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFeedbackItem, id)
	return err
}

const getFeedbackItem = `-- name: GetFeedbackItem :one
SELECT id, feedback_type, feedback_text, course_participation_id, course_phase_id, author_course_participation_id, created_at
FROM feedback_items
WHERE id = $1
`

func (q *Queries) GetFeedbackItem(ctx context.Context, id uuid.UUID) (FeedbackItem, error) {
	row := q.db.QueryRow(ctx, getFeedbackItem, id)
	var i FeedbackItem
	err := row.Scan(
		&i.ID,
		&i.FeedbackType,
		&i.FeedbackText,
		&i.CourseParticipationID,
		&i.CoursePhaseID,
		&i.AuthorCourseParticipationID,
		&i.CreatedAt,
	)
	return i, err
}

const listFeedbackItemsByAuthorInPhase = `-- name: ListFeedbackItemsByAuthorInPhase :many
SELECT id, feedback_type, feedback_text, course_participation_id, course_phase_id, author_course_participation_id, created_at
FROM feedback_items
WHERE author_course_participation_id = $1
  AND course_phase_id = $2
ORDER BY created_at
`

type ListFeedbackItemsByAuthorInPhaseParams struct {
	AuthorCourseParticipationID uuid.UUID `json:"author_course_participation_id"`
	CoursePhaseID               uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListFeedbackItemsByAuthorInPhase(ctx context.Context, arg ListFeedbackItemsByAuthorInPhaseParams) ([]FeedbackItem, error) {
	rows, err := q.db.Query(ctx, listFeedbackItemsByAuthorInPhase, arg.AuthorCourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedbackItem
	for rows.Next() {
		var i FeedbackItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedbackType,
			&i.FeedbackText,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeedbackItemsForCoursePhase = `-- name: ListFeedbackItemsForCoursePhase :many
SELECT id, feedback_type, feedback_text, course_participation_id, course_phase_id, author_course_participation_id, created_at
FROM feedback_items
WHERE course_phase_id = $1
ORDER BY created_at
`

func (q *Queries) ListFeedbackItemsForCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]FeedbackItem, error) {
	rows, err := q.db.Query(ctx, listFeedbackItemsForCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedbackItem
	for rows.Next() {
		var i FeedbackItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedbackType,
			&i.FeedbackText,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeedbackItemsForStudentInPhase = `-- name: ListFeedbackItemsForStudentInPhase :many
SELECT id, feedback_type, feedback_text, course_participation_id, course_phase_id, author_course_participation_id, created_at
FROM feedback_items
WHERE course_participation_id = $1
  AND course_phase_id = $2
ORDER BY created_at
`

type ListFeedbackItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListFeedbackItemsForStudentInPhase(ctx context.Context, arg ListFeedbackItemsForStudentInPhaseParams) ([]FeedbackItem, error) {
	rows, err := q.db.Query(ctx, listFeedbackItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedbackItem
	for rows.Next() {
		var i FeedbackItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedbackType,
			&i.FeedbackText,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNegativeFeedbackItemsForStudentInPhase = `-- name: ListNegativeFeedbackItemsForStudentInPhase :many
SELECT id, feedback_type, feedback_text, course_participation_id, course_phase_id, author_course_participation_id, created_at
FROM feedback_items
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND feedback_type = 'negative'
ORDER BY created_at
`

type ListNegativeFeedbackItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListNegativeFeedbackItemsForStudentInPhase(ctx context.Context, arg ListNegativeFeedbackItemsForStudentInPhaseParams) ([]FeedbackItem, error) {
	rows, err := q.db.Query(ctx, listNegativeFeedbackItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedbackItem
	for rows.Next() {
		var i FeedbackItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedbackType,
			&i.FeedbackText,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPositiveFeedbackItemsForStudentInPhase = `-- name: ListPositiveFeedbackItemsForStudentInPhase :many
SELECT id, feedback_type, feedback_text, course_participation_id, course_phase_id, author_course_participation_id, created_at
FROM feedback_items
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND feedback_type = 'positive'
ORDER BY created_at
`

type ListPositiveFeedbackItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListPositiveFeedbackItemsForStudentInPhase(ctx context.Context, arg ListPositiveFeedbackItemsForStudentInPhaseParams) ([]FeedbackItem, error) {
	rows, err := q.db.Query(ctx, listPositiveFeedbackItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedbackItem
	for rows.Next() {
		var i FeedbackItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedbackType,
			&i.FeedbackText,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeedbackItem = `-- name: UpdateFeedbackItem :exec
UPDATE feedback_items
SET feedback_type                  = $2,
    feedback_text                  = $3,
    course_participation_id        = $4,
    course_phase_id                = $5,
    author_course_participation_id = $6
WHERE id = $1
`

type UpdateFeedbackItemParams struct {
	ID                          uuid.UUID    `json:"id"`
	FeedbackType                FeedbackType `json:"feedback_type"`
	FeedbackText                string       `json:"feedback_text"`
	CourseParticipationID       uuid.UUID    `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID    `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID    `json:"author_course_participation_id"`
}

func (q *Queries) UpdateFeedbackItem(ctx context.Context, arg UpdateFeedbackItemParams) error {
	_, err := q.db.Exec(ctx, updateFeedbackItem,
		arg.ID,
		arg.FeedbackType,
		arg.FeedbackText,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.AuthorCourseParticipationID,
	)
	return err
}
