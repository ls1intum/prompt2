// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: action_item.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createActionItem = `-- name: CreateActionItem :exec
INSERT INTO action_item (id,
                         course_phase_id,
                         course_participation_id,
                         action,
                         author)
VALUES ($1, $2, $3, $4, $5)
`

type CreateActionItemParams struct {
	ID                    uuid.UUID `json:"id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	Action                string    `json:"action"`
	Author                string    `json:"author"`
}

func (q *Queries) CreateActionItem(ctx context.Context, arg CreateActionItemParams) error {
	_, err := q.db.Exec(ctx, createActionItem,
		arg.ID,
		arg.CoursePhaseID,
		arg.CourseParticipationID,
		arg.Action,
		arg.Author,
	)
	return err
}

const deleteActionItem = `-- name: DeleteActionItem :exec
DELETE
FROM action_item
WHERE id = $1
`

func (q *Queries) DeleteActionItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteActionItem, id)
	return err
}

const getActionItem = `-- name: GetActionItem :one
SELECT id, course_phase_id, course_participation_id, action, created_at, author
FROM action_item
WHERE id = $1
`

func (q *Queries) GetActionItem(ctx context.Context, id uuid.UUID) (ActionItem, error) {
	row := q.db.QueryRow(ctx, getActionItem, id)
	var i ActionItem
	err := row.Scan(
		&i.ID,
		&i.CoursePhaseID,
		&i.CourseParticipationID,
		&i.Action,
		&i.CreatedAt,
		&i.Author,
	)
	return i, err
}

const listActionItemsForCoursePhase = `-- name: ListActionItemsForCoursePhase :many
SELECT id, course_phase_id, course_participation_id, action, created_at, author
FROM action_item
WHERE course_phase_id = $1
`

func (q *Queries) ListActionItemsForCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]ActionItem, error) {
	rows, err := q.db.Query(ctx, listActionItemsForCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActionItem
	for rows.Next() {
		var i ActionItem
		if err := rows.Scan(
			&i.ID,
			&i.CoursePhaseID,
			&i.CourseParticipationID,
			&i.Action,
			&i.CreatedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActionItemsForStudentInPhase = `-- name: ListActionItemsForStudentInPhase :many
SELECT id, course_phase_id, course_participation_id, action, created_at, author
FROM action_item
WHERE course_participation_id = $1
  AND course_phase_id = $2
`

type ListActionItemsForStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListActionItemsForStudentInPhase(ctx context.Context, arg ListActionItemsForStudentInPhaseParams) ([]ActionItem, error) {
	rows, err := q.db.Query(ctx, listActionItemsForStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ActionItem
	for rows.Next() {
		var i ActionItem
		if err := rows.Scan(
			&i.ID,
			&i.CoursePhaseID,
			&i.CourseParticipationID,
			&i.Action,
			&i.CreatedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActionItem = `-- name: UpdateActionItem :exec
UPDATE action_item
SET course_phase_id         = $2,
    course_participation_id = $3,
    action                  = $4,
    author                  = $5
WHERE id = $1
`

type UpdateActionItemParams struct {
	ID                    uuid.UUID `json:"id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	Action                string    `json:"action"`
	Author                string    `json:"author"`
}

func (q *Queries) UpdateActionItem(ctx context.Context, arg UpdateActionItemParams) error {
	_, err := q.db.Exec(ctx, updateActionItem,
		arg.ID,
		arg.CoursePhaseID,
		arg.CourseParticipationID,
		arg.Action,
		arg.Author,
	)
	return err
}
