// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: assessment_template.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAssessmentTemplate = `-- name: CreateAssessmentTemplate :exec
INSERT INTO assessment_template (id, name, description, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateAssessmentTemplateParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateAssessmentTemplate(ctx context.Context, arg CreateAssessmentTemplateParams) error {
	_, err := q.db.Exec(ctx, createAssessmentTemplate, arg.ID, arg.Name, arg.Description)
	return err
}

const createOrUpdateAssessmentTemplateCoursePhase = `-- name: CreateOrUpdateAssessmentTemplateCoursePhase :exec
INSERT INTO assessment_template_course_phase (assessment_template_id, course_phase_id)
VALUES ($1, $2)
ON CONFLICT (course_phase_id)
    DO UPDATE
    SET assessment_template_id = EXCLUDED.assessment_template_id
`

type CreateOrUpdateAssessmentTemplateCoursePhaseParams struct {
	AssessmentTemplateID uuid.UUID `json:"assessment_template_id"`
	CoursePhaseID        uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateOrUpdateAssessmentTemplateCoursePhase(ctx context.Context, arg CreateOrUpdateAssessmentTemplateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAssessmentTemplateCoursePhase, arg.AssessmentTemplateID, arg.CoursePhaseID)
	return err
}

const deleteAssessmentTemplate = `-- name: DeleteAssessmentTemplate :exec
DELETE
FROM assessment_template
WHERE id = $1
`

func (q *Queries) DeleteAssessmentTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssessmentTemplate, id)
	return err
}

const deleteAssessmentTemplateCoursePhase = `-- name: DeleteAssessmentTemplateCoursePhase :exec
DELETE
FROM assessment_template_course_phase
WHERE assessment_template_id = $1
  AND course_phase_id = $2
`

type DeleteAssessmentTemplateCoursePhaseParams struct {
	AssessmentTemplateID uuid.UUID `json:"assessment_template_id"`
	CoursePhaseID        uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) DeleteAssessmentTemplateCoursePhase(ctx context.Context, arg DeleteAssessmentTemplateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, deleteAssessmentTemplateCoursePhase, arg.AssessmentTemplateID, arg.CoursePhaseID)
	return err
}

const getAssessmentTemplate = `-- name: GetAssessmentTemplate :one
SELECT id, name, description, created_at, updated_at
FROM assessment_template
WHERE id = $1
`

func (q *Queries) GetAssessmentTemplate(ctx context.Context, id uuid.UUID) (AssessmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssessmentTemplate, id)
	var i AssessmentTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssessmentTemplateByName = `-- name: GetAssessmentTemplateByName :one
SELECT id, name, description, created_at, updated_at
FROM assessment_template
WHERE name = $1
`

func (q *Queries) GetAssessmentTemplateByName(ctx context.Context, name string) (AssessmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssessmentTemplateByName, name)
	var i AssessmentTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssessmentTemplateForCoursePhase = `-- name: GetAssessmentTemplateForCoursePhase :one
SELECT at.id, at.name, at.description, at.created_at, at.updated_at
FROM assessment_template at
         INNER JOIN assessment_template_course_phase atcp ON at.id = atcp.assessment_template_id
WHERE atcp.course_phase_id = $1
`

func (q *Queries) GetAssessmentTemplateForCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) (AssessmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssessmentTemplateForCoursePhase, coursePhaseID)
	var i AssessmentTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAssessmentTemplates = `-- name: ListAssessmentTemplates :many
SELECT id, name, description, created_at, updated_at
FROM assessment_template
ORDER BY name ASC
`

func (q *Queries) ListAssessmentTemplates(ctx context.Context) ([]AssessmentTemplate, error) {
	rows, err := q.db.Query(ctx, listAssessmentTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssessmentTemplate
	for rows.Next() {
		var i AssessmentTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentTemplatesWithCoursePhases = `-- name: ListAssessmentTemplatesWithCoursePhases :many
SELECT at.id,
       at.name,
       at.description,
       at.created_at,
       at.updated_at,
       COALESCE(
                       json_agg(atcp.course_phase_id) FILTER (WHERE atcp.course_phase_id IS NOT NULL),
                       '[]'
       )::json AS course_phase_ids
FROM assessment_template at
         LEFT JOIN assessment_template_course_phase atcp ON at.id = atcp.assessment_template_id
GROUP BY at.id, at.name, at.description, at.created_at, at.updated_at
ORDER BY at.name ASC
`

type ListAssessmentTemplatesWithCoursePhasesRow struct {
	ID             uuid.UUID        `json:"id"`
	Name           string           `json:"name"`
	Description    pgtype.Text      `json:"description"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
	CoursePhaseIds []byte           `json:"course_phase_ids"`
}

func (q *Queries) ListAssessmentTemplatesWithCoursePhases(ctx context.Context) ([]ListAssessmentTemplatesWithCoursePhasesRow, error) {
	rows, err := q.db.Query(ctx, listAssessmentTemplatesWithCoursePhases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAssessmentTemplatesWithCoursePhasesRow
	for rows.Next() {
		var i ListAssessmentTemplatesWithCoursePhasesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CoursePhaseIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCoursePhasesByAssessmentTemplate = `-- name: ListCoursePhasesByAssessmentTemplate :many
SELECT course_phase_id
FROM assessment_template_course_phase
WHERE assessment_template_id = $1
`

func (q *Queries) ListCoursePhasesByAssessmentTemplate(ctx context.Context, assessmentTemplateID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, listCoursePhasesByAssessmentTemplate, assessmentTemplateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var course_phase_id uuid.UUID
		if err := rows.Scan(&course_phase_id); err != nil {
			return nil, err
		}
		items = append(items, course_phase_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssessmentTemplate = `-- name: UpdateAssessmentTemplate :exec
UPDATE assessment_template
SET name        = $2,
    description = $3,
    updated_at  = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateAssessmentTemplateParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateAssessmentTemplate(ctx context.Context, arg UpdateAssessmentTemplateParams) error {
	_, err := q.db.Exec(ctx, updateAssessmentTemplate, arg.ID, arg.Name, arg.Description)
	return err
}
