// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: assessment_template.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAssessmentTemplate = `-- name: CreateAssessmentTemplate :exec
INSERT INTO assessment_template (id, name, description, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateAssessmentTemplateParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateAssessmentTemplate(ctx context.Context, arg CreateAssessmentTemplateParams) error {
	_, err := q.db.Exec(ctx, createAssessmentTemplate, arg.ID, arg.Name, arg.Description)
	return err
}

const deleteAssessmentTemplate = `-- name: DeleteAssessmentTemplate :exec
DELETE
FROM assessment_template
WHERE id = $1
`

func (q *Queries) DeleteAssessmentTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssessmentTemplate, id)
	return err
}

const getAssessmentTemplate = `-- name: GetAssessmentTemplate :one
SELECT id, name, description, created_at, updated_at
FROM assessment_template
WHERE id = $1
`

func (q *Queries) GetAssessmentTemplate(ctx context.Context, id uuid.UUID) (AssessmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssessmentTemplate, id)
	var i AssessmentTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAssessmentTemplateByName = `-- name: GetAssessmentTemplateByName :one
SELECT id, name, description, created_at, updated_at
FROM assessment_template
WHERE name = $1
`

func (q *Queries) GetAssessmentTemplateByName(ctx context.Context, name string) (AssessmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssessmentTemplateByName, name)
	var i AssessmentTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAssessmentTemplates = `-- name: ListAssessmentTemplates :many
SELECT id, name, description, created_at, updated_at
FROM assessment_template
ORDER BY name ASC
`

func (q *Queries) ListAssessmentTemplates(ctx context.Context) ([]AssessmentTemplate, error) {
	rows, err := q.db.Query(ctx, listAssessmentTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AssessmentTemplate
	for rows.Next() {
		var i AssessmentTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssessmentTemplate = `-- name: UpdateAssessmentTemplate :exec
UPDATE assessment_template
SET name        = $2,
    description = $3,
    updated_at  = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateAssessmentTemplateParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateAssessmentTemplate(ctx context.Context, arg UpdateAssessmentTemplateParams) error {
	_, err := q.db.Exec(ctx, updateAssessmentTemplate, arg.ID, arg.Name, arg.Description)
	return err
}
