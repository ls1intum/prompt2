// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ScoreLevel string

const (
	ScoreLevelNovice       ScoreLevel = "novice"
	ScoreLevelIntermediate ScoreLevel = "intermediate"
	ScoreLevelAdvanced     ScoreLevel = "advanced"
	ScoreLevelExpert       ScoreLevel = "expert"
)

func (e *ScoreLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScoreLevel(s)
	case string:
		*e = ScoreLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for ScoreLevel: %T", src)
	}
	return nil
}

type NullScoreLevel struct {
	ScoreLevel ScoreLevel `json:"score_level"`
	Valid      bool       `json:"valid"` // Valid is true if ScoreLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScoreLevel) Scan(value interface{}) error {
	if value == nil {
		ns.ScoreLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScoreLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScoreLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScoreLevel), nil
}

type Assessment struct {
	ID                    uuid.UUID        `json:"id"`
	CourseParticipationID uuid.UUID        `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID        `json:"course_phase_id"`
	CompetencyID          uuid.UUID        `json:"competency_id"`
	Score                 ScoreLevel       `json:"score"`
	Comment               pgtype.Text      `json:"comment"`
	AssessedAt            pgtype.Timestamp `json:"assessed_at"`
	Author                string           `json:"author"`
}

type AssessmentCompletion struct {
	CourseParticipationID uuid.UUID        `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID        `json:"course_phase_id"`
	CompletedAt           pgtype.Timestamp `json:"completed_at"`
	Author                string           `json:"author"`
}

type Category struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Weight      int32       `json:"weight"`
}

type Competency struct {
	ID           uuid.UUID   `json:"id"`
	CategoryID   uuid.UUID   `json:"category_id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	Novice       string      `json:"novice"`
	Intermediate string      `json:"intermediate"`
	Advanced     string      `json:"advanced"`
	Expert       string      `json:"expert"`
	Weight       int32       `json:"weight"`
}

type ScoreLevelCategory struct {
	CoursePhaseID         uuid.UUID      `json:"course_phase_id"`
	CourseParticipationID uuid.UUID      `json:"course_participation_id"`
	ScoreNumeric          pgtype.Numeric `json:"score_numeric"`
	ScoreLevel            string         `json:"score_level"`
}

type WeightedParticipantScore struct {
	CoursePhaseID         uuid.UUID      `json:"course_phase_id"`
	CourseParticipationID uuid.UUID      `json:"course_participation_id"`
	ScoreNumeric          pgtype.Numeric `json:"score_numeric"`
}
