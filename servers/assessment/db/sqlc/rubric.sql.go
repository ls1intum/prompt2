// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rubric.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteRubric = `-- name: DeleteRubric :exec
DELETE FROM rubric
WHERE id = $1
`

func (q *Queries) DeleteRubric(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRubric, id)
	return err
}

const getRubricsForCompetency = `-- name: GetRubricsForCompetency :many
SELECT id, competency_id, level, description
FROM rubric
WHERE competency_id = $1
ORDER BY level
`

func (q *Queries) GetRubricsForCompetency(ctx context.Context, competencyID uuid.UUID) ([]Rubric, error) {
	rows, err := q.db.Query(ctx, getRubricsForCompetency, competencyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rubric
	for rows.Next() {
		var i Rubric
		if err := rows.Scan(
			&i.ID,
			&i.CompetencyID,
			&i.Level,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRubric = `-- name: InsertRubric :exec
INSERT INTO rubric (id, competency_id, level, description)
VALUES ($1, $2, $3, $4)
`

type InsertRubricParams struct {
	ID           uuid.UUID `json:"id"`
	CompetencyID uuid.UUID `json:"competency_id"`
	Level        int16     `json:"level"`
	Description  string    `json:"description"`
}

func (q *Queries) InsertRubric(ctx context.Context, arg InsertRubricParams) error {
	_, err := q.db.Exec(ctx, insertRubric,
		arg.ID,
		arg.CompetencyID,
		arg.Level,
		arg.Description,
	)
	return err
}

const updateRubric = `-- name: UpdateRubric :exec
UPDATE rubric
SET level = $2,
    description = $3
WHERE id = $1
`

type UpdateRubricParams struct {
	ID          uuid.UUID `json:"id"`
	Level       int16     `json:"level"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateRubric(ctx context.Context, arg UpdateRubricParams) error {
	_, err := q.db.Exec(ctx, updateRubric, arg.ID, arg.Level, arg.Description)
	return err
}
