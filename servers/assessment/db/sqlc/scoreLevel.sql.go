// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scoreLevel.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAllScoreLevels = `-- name: GetAllScoreLevels :many
SELECT course_participation_id, score_level
FROM completed_score_levels
WHERE course_phase_id = $1
`

type GetAllScoreLevelsRow struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	ScoreLevel            string    `json:"score_level"`
}

func (q *Queries) GetAllScoreLevels(ctx context.Context, coursePhaseID uuid.UUID) ([]GetAllScoreLevelsRow, error) {
	rows, err := q.db.Query(ctx, getAllScoreLevels, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllScoreLevelsRow
	for rows.Next() {
		var i GetAllScoreLevelsRow
		if err := rows.Scan(&i.CourseParticipationID, &i.ScoreLevel); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoreLevelByCourseParticipationID = `-- name: GetScoreLevelByCourseParticipationID :one
SELECT score_level
FROM completed_score_levels
WHERE course_phase_id = $1
  AND course_participation_id = $2
`

type GetScoreLevelByCourseParticipationIDParams struct {
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
}

func (q *Queries) GetScoreLevelByCourseParticipationID(ctx context.Context, arg GetScoreLevelByCourseParticipationIDParams) (string, error) {
	row := q.db.QueryRow(ctx, getScoreLevelByCourseParticipationID, arg.CoursePhaseID, arg.CourseParticipationID)
	var score_level string
	err := row.Scan(&score_level)
	return score_level, err
}

const getScoreLevelByCourseParticipationIDNumeric = `-- name: GetScoreLevelByCourseParticipationIDNumeric :one
SELECT
    COALESCE(score_numeric, 0) AS score_numeric
FROM weighted_participant_scores
WHERE course_phase_id = $1
  AND course_participation_id = $2
`

type GetScoreLevelByCourseParticipationIDNumericParams struct {
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
}

func (q *Queries) GetScoreLevelByCourseParticipationIDNumeric(ctx context.Context, arg GetScoreLevelByCourseParticipationIDNumericParams) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getScoreLevelByCourseParticipationIDNumeric, arg.CoursePhaseID, arg.CourseParticipationID)
	var score_numeric pgtype.Numeric
	err := row.Scan(&score_numeric)
	return score_numeric, err
}

const getStudentScoreWithLevel = `-- name: GetStudentScoreWithLevel :one
SELECT
    course_participation_id,
    score_numeric,
    CASE
        WHEN score_numeric < 1.5 THEN 'novice'
        WHEN score_numeric < 2.5 THEN 'intermediate'
        WHEN score_numeric < 3.5 THEN 'advanced'
        ELSE 'expert'
    END AS score_level
FROM weighted_participant_scores
WHERE course_phase_id = $1
  AND course_participation_id = $2
`

type GetStudentScoreWithLevelParams struct {
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
}

type GetStudentScoreWithLevelRow struct {
	CourseParticipationID uuid.UUID      `json:"course_participation_id"`
	ScoreNumeric          pgtype.Numeric `json:"score_numeric"`
	ScoreLevel            string         `json:"score_level"`
}

func (q *Queries) GetStudentScoreWithLevel(ctx context.Context, arg GetStudentScoreWithLevelParams) (GetStudentScoreWithLevelRow, error) {
	row := q.db.QueryRow(ctx, getStudentScoreWithLevel, arg.CoursePhaseID, arg.CourseParticipationID)
	var i GetStudentScoreWithLevelRow
	err := row.Scan(&i.CourseParticipationID, &i.ScoreNumeric, &i.ScoreLevel)
	return i, err
}
