// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: evaluation_completion.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkEvaluationCompletionExists = `-- name: CheckEvaluationCompletionExists :one
SELECT EXISTS (SELECT 1
               FROM evaluation_completion
               WHERE course_participation_id = $1
                 AND course_phase_id = $2
                 AND author_course_participation_id = $3)
`

type CheckEvaluationCompletionExistsParams struct {
	CourseParticipationID       uuid.UUID `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID `json:"author_course_participation_id"`
}

func (q *Queries) CheckEvaluationCompletionExists(ctx context.Context, arg CheckEvaluationCompletionExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkEvaluationCompletionExists, arg.CourseParticipationID, arg.CoursePhaseID, arg.AuthorCourseParticipationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createOrUpdateEvaluationCompletion = `-- name: CreateOrUpdateEvaluationCompletion :exec
INSERT INTO evaluation_completion (course_participation_id,
                                   course_phase_id,
                                   author_course_participation_id,
                                   completed_at,
                                   completed)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (course_participation_id, course_phase_id, author_course_participation_id)
    DO UPDATE
    SET completed_at = EXCLUDED.completed_at,
        completed    = EXCLUDED.completed
`

type CreateOrUpdateEvaluationCompletionParams struct {
	CourseParticipationID       uuid.UUID          `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID          `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID          `json:"author_course_participation_id"`
	CompletedAt                 pgtype.Timestamptz `json:"completed_at"`
	Completed                   bool               `json:"completed"`
}

func (q *Queries) CreateOrUpdateEvaluationCompletion(ctx context.Context, arg CreateOrUpdateEvaluationCompletionParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateEvaluationCompletion,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.AuthorCourseParticipationID,
		arg.CompletedAt,
		arg.Completed,
	)
	return err
}

const deleteEvaluationCompletion = `-- name: DeleteEvaluationCompletion :exec
DELETE
FROM evaluation_completion
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND author_course_participation_id = $3
`

type DeleteEvaluationCompletionParams struct {
	CourseParticipationID       uuid.UUID `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID `json:"author_course_participation_id"`
}

func (q *Queries) DeleteEvaluationCompletion(ctx context.Context, arg DeleteEvaluationCompletionParams) error {
	_, err := q.db.Exec(ctx, deleteEvaluationCompletion, arg.CourseParticipationID, arg.CoursePhaseID, arg.AuthorCourseParticipationID)
	return err
}

const getEvaluationCompletion = `-- name: GetEvaluationCompletion :one
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND author_course_participation_id = $3
`

type GetEvaluationCompletionParams struct {
	CourseParticipationID       uuid.UUID `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID `json:"author_course_participation_id"`
}

func (q *Queries) GetEvaluationCompletion(ctx context.Context, arg GetEvaluationCompletionParams) (EvaluationCompletion, error) {
	row := q.db.QueryRow(ctx, getEvaluationCompletion, arg.CourseParticipationID, arg.CoursePhaseID, arg.AuthorCourseParticipationID)
	var i EvaluationCompletion
	err := row.Scan(
		&i.ID,
		&i.CourseParticipationID,
		&i.CoursePhaseID,
		&i.AuthorCourseParticipationID,
		&i.CompletedAt,
		&i.Completed,
	)
	return i, err
}

const getEvaluationCompletionsByCoursePhase = `-- name: GetEvaluationCompletionsByCoursePhase :many
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE course_phase_id = $1
`

func (q *Queries) GetEvaluationCompletionsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]EvaluationCompletion, error) {
	rows, err := q.db.Query(ctx, getEvaluationCompletionsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvaluationCompletion
	for rows.Next() {
		var i EvaluationCompletion
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CompletedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvaluationCompletionsForAuthorInPhase = `-- name: GetEvaluationCompletionsForAuthorInPhase :many
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE author_course_participation_id = $1
  AND course_phase_id = $2
`

type GetEvaluationCompletionsForAuthorInPhaseParams struct {
	AuthorCourseParticipationID uuid.UUID `json:"author_course_participation_id"`
	CoursePhaseID               uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) GetEvaluationCompletionsForAuthorInPhase(ctx context.Context, arg GetEvaluationCompletionsForAuthorInPhaseParams) ([]EvaluationCompletion, error) {
	rows, err := q.db.Query(ctx, getEvaluationCompletionsForAuthorInPhase, arg.AuthorCourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvaluationCompletion
	for rows.Next() {
		var i EvaluationCompletion
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CompletedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvaluationCompletionsForParticipantInPhase = `-- name: GetEvaluationCompletionsForParticipantInPhase :many
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE course_participation_id = $1
  AND course_phase_id = $2
`

type GetEvaluationCompletionsForParticipantInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) GetEvaluationCompletionsForParticipantInPhase(ctx context.Context, arg GetEvaluationCompletionsForParticipantInPhaseParams) ([]EvaluationCompletion, error) {
	rows, err := q.db.Query(ctx, getEvaluationCompletionsForParticipantInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvaluationCompletion
	for rows.Next() {
		var i EvaluationCompletion
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CompletedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeerEvaluationCompletionsByCoursePhase = `-- name: GetPeerEvaluationCompletionsByCoursePhase :many
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE course_phase_id = $1
  AND course_participation_id != author_course_participation_id
`

func (q *Queries) GetPeerEvaluationCompletionsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]EvaluationCompletion, error) {
	rows, err := q.db.Query(ctx, getPeerEvaluationCompletionsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvaluationCompletion
	for rows.Next() {
		var i EvaluationCompletion
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CompletedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeerEvaluationCompletionsForParticipantInPhase = `-- name: GetPeerEvaluationCompletionsForParticipantInPhase :many
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND course_participation_id != author_course_participation_id
`

type GetPeerEvaluationCompletionsForParticipantInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) GetPeerEvaluationCompletionsForParticipantInPhase(ctx context.Context, arg GetPeerEvaluationCompletionsForParticipantInPhaseParams) ([]EvaluationCompletion, error) {
	rows, err := q.db.Query(ctx, getPeerEvaluationCompletionsForParticipantInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvaluationCompletion
	for rows.Next() {
		var i EvaluationCompletion
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CompletedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSelfEvaluationCompletionsByCoursePhase = `-- name: GetSelfEvaluationCompletionsByCoursePhase :many
SELECT id, course_participation_id, course_phase_id, author_course_participation_id, completed_at, completed
FROM evaluation_completion
WHERE course_phase_id = $1
  AND course_participation_id = author_course_participation_id
`

func (q *Queries) GetSelfEvaluationCompletionsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]EvaluationCompletion, error) {
	rows, err := q.db.Query(ctx, getSelfEvaluationCompletionsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EvaluationCompletion
	for rows.Next() {
		var i EvaluationCompletion
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.AuthorCourseParticipationID,
			&i.CompletedAt,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEvaluationAsFinished = `-- name: MarkEvaluationAsFinished :exec
INSERT INTO evaluation_completion (course_participation_id,
                   course_phase_id,
                   author_course_participation_id,
                   completed_at,
                   completed)
VALUES ($1, $2, $3, $4, true)
ON CONFLICT (course_participation_id, course_phase_id, author_course_participation_id)
  DO UPDATE
  SET completed_at = EXCLUDED.completed_at,
    completed    = true
`

type MarkEvaluationAsFinishedParams struct {
	CourseParticipationID       uuid.UUID          `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID          `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID          `json:"author_course_participation_id"`
	CompletedAt                 pgtype.Timestamptz `json:"completed_at"`
}

func (q *Queries) MarkEvaluationAsFinished(ctx context.Context, arg MarkEvaluationAsFinishedParams) error {
	_, err := q.db.Exec(ctx, markEvaluationAsFinished,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.AuthorCourseParticipationID,
		arg.CompletedAt,
	)
	return err
}

const unmarkEvaluationAsFinished = `-- name: UnmarkEvaluationAsFinished :exec
UPDATE evaluation_completion
SET completed = false
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND author_course_participation_id = $3
`

type UnmarkEvaluationAsFinishedParams struct {
	CourseParticipationID       uuid.UUID `json:"course_participation_id"`
	CoursePhaseID               uuid.UUID `json:"course_phase_id"`
	AuthorCourseParticipationID uuid.UUID `json:"author_course_participation_id"`
}

func (q *Queries) UnmarkEvaluationAsFinished(ctx context.Context, arg UnmarkEvaluationAsFinishedParams) error {
	_, err := q.db.Exec(ctx, unmarkEvaluationAsFinished, arg.CourseParticipationID, arg.CoursePhaseID, arg.AuthorCourseParticipationID)
	return err
}
