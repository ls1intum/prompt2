// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_phase_config.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateAssessmentTemplateCoursePhase = `-- name: CreateOrUpdateAssessmentTemplateCoursePhase :exec
INSERT INTO course_phase_config (assessment_template_id, course_phase_id)
VALUES ($1, $2)
ON CONFLICT (course_phase_id)
    DO UPDATE SET assessment_template_id = EXCLUDED.assessment_template_id
`

type CreateOrUpdateAssessmentTemplateCoursePhaseParams struct {
	AssessmentTemplateID uuid.UUID `json:"assessment_template_id"`
	CoursePhaseID        uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateOrUpdateAssessmentTemplateCoursePhase(ctx context.Context, arg CreateOrUpdateAssessmentTemplateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAssessmentTemplateCoursePhase, arg.AssessmentTemplateID, arg.CoursePhaseID)
	return err
}

const createOrUpdateCoursePhaseConfig = `-- name: CreateOrUpdateCoursePhaseConfig :exec
INSERT INTO course_phase_config (
    assessment_template_id, 
    course_phase_id, 
    deadline, 
    self_assessment_enabled, 
    self_assessment_template, 
    self_assessment_deadline, 
    peer_assessment_enabled, 
    peer_assessment_template, 
    peer_assessment_deadline
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (course_phase_id)
DO UPDATE SET
    assessment_template_id = EXCLUDED.assessment_template_id,
    deadline = EXCLUDED.deadline,
    self_assessment_enabled = EXCLUDED.self_assessment_enabled,
    self_assessment_template = EXCLUDED.self_assessment_template,
    self_assessment_deadline = EXCLUDED.self_assessment_deadline,
    peer_assessment_enabled = EXCLUDED.peer_assessment_enabled,
    peer_assessment_template = EXCLUDED.peer_assessment_template,
    peer_assessment_deadline = EXCLUDED.peer_assessment_deadline
`

type CreateOrUpdateCoursePhaseConfigParams struct {
	AssessmentTemplateID   uuid.UUID          `json:"assessment_template_id"`
	CoursePhaseID          uuid.UUID          `json:"course_phase_id"`
	Deadline               pgtype.Timestamptz `json:"deadline"`
	SelfAssessmentEnabled  bool               `json:"self_assessment_enabled"`
	SelfAssessmentTemplate uuid.UUID          `json:"self_assessment_template"`
	SelfAssessmentDeadline pgtype.Timestamptz `json:"self_assessment_deadline"`
	PeerAssessmentEnabled  bool               `json:"peer_assessment_enabled"`
	PeerAssessmentTemplate uuid.UUID          `json:"peer_assessment_template"`
	PeerAssessmentDeadline pgtype.Timestamptz `json:"peer_assessment_deadline"`
}

func (q *Queries) CreateOrUpdateCoursePhaseConfig(ctx context.Context, arg CreateOrUpdateCoursePhaseConfigParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateCoursePhaseConfig,
		arg.AssessmentTemplateID,
		arg.CoursePhaseID,
		arg.Deadline,
		arg.SelfAssessmentEnabled,
		arg.SelfAssessmentTemplate,
		arg.SelfAssessmentDeadline,
		arg.PeerAssessmentEnabled,
		arg.PeerAssessmentTemplate,
		arg.PeerAssessmentDeadline,
	)
	return err
}

const getCoursePhaseConfig = `-- name: GetCoursePhaseConfig :one
SELECT assessment_template_id, course_phase_id, deadline, self_assessment_enabled, self_assessment_template, self_assessment_deadline, peer_assessment_enabled, peer_assessment_template, peer_assessment_deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetCoursePhaseConfig(ctx context.Context, coursePhaseID uuid.UUID) (CoursePhaseConfig, error) {
	row := q.db.QueryRow(ctx, getCoursePhaseConfig, coursePhaseID)
	var i CoursePhaseConfig
	err := row.Scan(
		&i.AssessmentTemplateID,
		&i.CoursePhaseID,
		&i.Deadline,
		&i.SelfAssessmentEnabled,
		&i.SelfAssessmentTemplate,
		&i.SelfAssessmentDeadline,
		&i.PeerAssessmentEnabled,
		&i.PeerAssessmentTemplate,
		&i.PeerAssessmentDeadline,
	)
	return i, err
}

const getCoursePhaseDeadline = `-- name: GetCoursePhaseDeadline :one
SELECT deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetCoursePhaseDeadline(ctx context.Context, coursePhaseID uuid.UUID) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getCoursePhaseDeadline, coursePhaseID)
	var deadline pgtype.Timestamptz
	err := row.Scan(&deadline)
	return deadline, err
}

const getCoursePhasesByAssessmentTemplate = `-- name: GetCoursePhasesByAssessmentTemplate :many
SELECT course_phase_id
FROM course_phase_config
WHERE assessment_template_id = $1
`

func (q *Queries) GetCoursePhasesByAssessmentTemplate(ctx context.Context, assessmentTemplateID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getCoursePhasesByAssessmentTemplate, assessmentTemplateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var course_phase_id uuid.UUID
		if err := rows.Scan(&course_phase_id); err != nil {
			return nil, err
		}
		items = append(items, course_phase_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeerAssessmentDeadline = `-- name: GetPeerAssessmentDeadline :one
SELECT peer_assessment_deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetPeerAssessmentDeadline(ctx context.Context, coursePhaseID uuid.UUID) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getPeerAssessmentDeadline, coursePhaseID)
	var peer_assessment_deadline pgtype.Timestamptz
	err := row.Scan(&peer_assessment_deadline)
	return peer_assessment_deadline, err
}

const getSelfAssessmentDeadline = `-- name: GetSelfAssessmentDeadline :one
SELECT self_assessment_deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetSelfAssessmentDeadline(ctx context.Context, coursePhaseID uuid.UUID) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getSelfAssessmentDeadline, coursePhaseID)
	var self_assessment_deadline pgtype.Timestamptz
	err := row.Scan(&self_assessment_deadline)
	return self_assessment_deadline, err
}

const listAssessmentTemplateCoursePhaseMappings = `-- name: ListAssessmentTemplateCoursePhaseMappings :many
SELECT assessment_template_id, course_phase_id, deadline, self_assessment_enabled, self_assessment_template, self_assessment_deadline, peer_assessment_enabled, peer_assessment_template, peer_assessment_deadline
FROM course_phase_config
ORDER BY assessment_template_id, course_phase_id
`

func (q *Queries) ListAssessmentTemplateCoursePhaseMappings(ctx context.Context) ([]CoursePhaseConfig, error) {
	rows, err := q.db.Query(ctx, listAssessmentTemplateCoursePhaseMappings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoursePhaseConfig
	for rows.Next() {
		var i CoursePhaseConfig
		if err := rows.Scan(
			&i.AssessmentTemplateID,
			&i.CoursePhaseID,
			&i.Deadline,
			&i.SelfAssessmentEnabled,
			&i.SelfAssessmentTemplate,
			&i.SelfAssessmentDeadline,
			&i.PeerAssessmentEnabled,
			&i.PeerAssessmentTemplate,
			&i.PeerAssessmentDeadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
