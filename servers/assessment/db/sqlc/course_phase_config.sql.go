// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_phase_config.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrUpdateAssessmentTemplateCoursePhase = `-- name: CreateOrUpdateAssessmentTemplateCoursePhase :exec
INSERT INTO course_phase_config (assessment_template_id, course_phase_id)
VALUES ($1, $2)
ON CONFLICT (course_phase_id)
    DO UPDATE SET assessment_template_id = EXCLUDED.assessment_template_id
`

type CreateOrUpdateAssessmentTemplateCoursePhaseParams struct {
	AssessmentTemplateID uuid.UUID `json:"assessment_template_id"`
	CoursePhaseID        uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateOrUpdateAssessmentTemplateCoursePhase(ctx context.Context, arg CreateOrUpdateAssessmentTemplateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAssessmentTemplateCoursePhase, arg.AssessmentTemplateID, arg.CoursePhaseID)
	return err
}

const deleteAssessmentTemplateCoursePhase = `-- name: DeleteAssessmentTemplateCoursePhase :exec
DELETE
FROM course_phase_config
WHERE assessment_template_id = $1
  AND course_phase_id = $2
`

type DeleteAssessmentTemplateCoursePhaseParams struct {
	AssessmentTemplateID uuid.UUID `json:"assessment_template_id"`
	CoursePhaseID        uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) DeleteAssessmentTemplateCoursePhase(ctx context.Context, arg DeleteAssessmentTemplateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, deleteAssessmentTemplateCoursePhase, arg.AssessmentTemplateID, arg.CoursePhaseID)
	return err
}

const getAssessmentTemplatesByCoursePhase = `-- name: GetAssessmentTemplatesByCoursePhase :one
SELECT at.id, at.name, at.description, at.created_at, at.updated_at
FROM assessment_template at
         INNER JOIN course_phase_config cpc ON at.id = cpc.assessment_template_id
WHERE cpc.course_phase_id = $1
`

func (q *Queries) GetAssessmentTemplatesByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) (AssessmentTemplate, error) {
	row := q.db.QueryRow(ctx, getAssessmentTemplatesByCoursePhase, coursePhaseID)
	var i AssessmentTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCoursePhasesByAssessmentTemplate = `-- name: GetCoursePhasesByAssessmentTemplate :many
SELECT course_phase_id
FROM course_phase_config
WHERE assessment_template_id = $1
`

func (q *Queries) GetCoursePhasesByAssessmentTemplate(ctx context.Context, assessmentTemplateID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getCoursePhasesByAssessmentTemplate, assessmentTemplateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var course_phase_id uuid.UUID
		if err := rows.Scan(&course_phase_id); err != nil {
			return nil, err
		}
		items = append(items, course_phase_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentTemplateCoursePhaseMappings = `-- name: ListAssessmentTemplateCoursePhaseMappings :many
SELECT assessment_template_id, course_phase_id, deadline
FROM course_phase_config
ORDER BY assessment_template_id, course_phase_id
`

func (q *Queries) ListAssessmentTemplateCoursePhaseMappings(ctx context.Context) ([]CoursePhaseConfig, error) {
	rows, err := q.db.Query(ctx, listAssessmentTemplateCoursePhaseMappings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoursePhaseConfig
	for rows.Next() {
		var i CoursePhaseConfig
		if err := rows.Scan(&i.AssessmentTemplateID, &i.CoursePhaseID, &i.Deadline); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
