// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_phase_config.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateAssessmentTemplateCoursePhase = `-- name: CreateOrUpdateAssessmentTemplateCoursePhase :exec
INSERT INTO course_phase_config (assessment_template_id, course_phase_id)
VALUES ($1, $2)
ON CONFLICT (course_phase_id)
    DO UPDATE SET assessment_template_id = EXCLUDED.assessment_template_id
`

type CreateOrUpdateAssessmentTemplateCoursePhaseParams struct {
	AssessmentTemplateID uuid.UUID `json:"assessment_template_id"`
	CoursePhaseID        uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CreateOrUpdateAssessmentTemplateCoursePhase(ctx context.Context, arg CreateOrUpdateAssessmentTemplateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateAssessmentTemplateCoursePhase, arg.AssessmentTemplateID, arg.CoursePhaseID)
	return err
}

const createOrUpdateCoursePhaseConfig = `-- name: CreateOrUpdateCoursePhaseConfig :exec
INSERT INTO course_phase_config (
    assessment_template_id, 
    course_phase_id, 
    deadline, 
    self_evaluation_enabled, 
    self_evaluation_template, 
    self_evaluation_deadline, 
    peer_evaluation_enabled, 
    peer_evaluation_template, 
    peer_evaluation_deadline
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (course_phase_id)
DO UPDATE SET
    assessment_template_id = EXCLUDED.assessment_template_id,
    deadline = EXCLUDED.deadline,
    self_evaluation_enabled = EXCLUDED.self_evaluation_enabled,
    self_evaluation_template = EXCLUDED.self_evaluation_template,
    self_evaluation_deadline = EXCLUDED.self_evaluation_deadline,
    peer_evaluation_enabled = EXCLUDED.peer_evaluation_enabled,
    peer_evaluation_template = EXCLUDED.peer_evaluation_template,
    peer_evaluation_deadline = EXCLUDED.peer_evaluation_deadline
`

type CreateOrUpdateCoursePhaseConfigParams struct {
	AssessmentTemplateID   uuid.UUID          `json:"assessment_template_id"`
	CoursePhaseID          uuid.UUID          `json:"course_phase_id"`
	Deadline               pgtype.Timestamptz `json:"deadline"`
	SelfEvaluationEnabled  bool               `json:"self_evaluation_enabled"`
	SelfEvaluationTemplate uuid.UUID          `json:"self_evaluation_template"`
	SelfEvaluationDeadline pgtype.Timestamptz `json:"self_evaluation_deadline"`
	PeerEvaluationEnabled  bool               `json:"peer_evaluation_enabled"`
	PeerEvaluationTemplate uuid.UUID          `json:"peer_evaluation_template"`
	PeerEvaluationDeadline pgtype.Timestamptz `json:"peer_evaluation_deadline"`
}

func (q *Queries) CreateOrUpdateCoursePhaseConfig(ctx context.Context, arg CreateOrUpdateCoursePhaseConfigParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateCoursePhaseConfig,
		arg.AssessmentTemplateID,
		arg.CoursePhaseID,
		arg.Deadline,
		arg.SelfEvaluationEnabled,
		arg.SelfEvaluationTemplate,
		arg.SelfEvaluationDeadline,
		arg.PeerEvaluationEnabled,
		arg.PeerEvaluationTemplate,
		arg.PeerEvaluationDeadline,
	)
	return err
}

const getCoursePhaseConfig = `-- name: GetCoursePhaseConfig :one
SELECT assessment_template_id, course_phase_id, deadline, self_evaluation_enabled, self_evaluation_template, self_evaluation_deadline, peer_evaluation_enabled, peer_evaluation_template, peer_evaluation_deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetCoursePhaseConfig(ctx context.Context, coursePhaseID uuid.UUID) (CoursePhaseConfig, error) {
	row := q.db.QueryRow(ctx, getCoursePhaseConfig, coursePhaseID)
	var i CoursePhaseConfig
	err := row.Scan(
		&i.AssessmentTemplateID,
		&i.CoursePhaseID,
		&i.Deadline,
		&i.SelfEvaluationEnabled,
		&i.SelfEvaluationTemplate,
		&i.SelfEvaluationDeadline,
		&i.PeerEvaluationEnabled,
		&i.PeerEvaluationTemplate,
		&i.PeerEvaluationDeadline,
	)
	return i, err
}

const getCoursePhaseDeadline = `-- name: GetCoursePhaseDeadline :one
SELECT deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetCoursePhaseDeadline(ctx context.Context, coursePhaseID uuid.UUID) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getCoursePhaseDeadline, coursePhaseID)
	var deadline pgtype.Timestamptz
	err := row.Scan(&deadline)
	return deadline, err
}

const getCoursePhasesByAssessmentTemplate = `-- name: GetCoursePhasesByAssessmentTemplate :many
SELECT course_phase_id
FROM course_phase_config
WHERE assessment_template_id = $1
`

func (q *Queries) GetCoursePhasesByAssessmentTemplate(ctx context.Context, assessmentTemplateID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getCoursePhasesByAssessmentTemplate, assessmentTemplateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var course_phase_id uuid.UUID
		if err := rows.Scan(&course_phase_id); err != nil {
			return nil, err
		}
		items = append(items, course_phase_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPeerEvaluationDeadline = `-- name: GetPeerEvaluationDeadline :one
SELECT peer_evaluation_deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetPeerEvaluationDeadline(ctx context.Context, coursePhaseID uuid.UUID) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getPeerEvaluationDeadline, coursePhaseID)
	var peer_evaluation_deadline pgtype.Timestamptz
	err := row.Scan(&peer_evaluation_deadline)
	return peer_evaluation_deadline, err
}

const getSelfEvaluationDeadline = `-- name: GetSelfEvaluationDeadline :one
SELECT self_evaluation_deadline
FROM course_phase_config
WHERE course_phase_id = $1
`

func (q *Queries) GetSelfEvaluationDeadline(ctx context.Context, coursePhaseID uuid.UUID) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getSelfEvaluationDeadline, coursePhaseID)
	var self_evaluation_deadline pgtype.Timestamptz
	err := row.Scan(&self_evaluation_deadline)
	return self_evaluation_deadline, err
}

const listAssessmentTemplateCoursePhaseMappings = `-- name: ListAssessmentTemplateCoursePhaseMappings :many
SELECT assessment_template_id, course_phase_id, deadline, self_evaluation_enabled, self_evaluation_template, self_evaluation_deadline, peer_evaluation_enabled, peer_evaluation_template, peer_evaluation_deadline
FROM course_phase_config
ORDER BY assessment_template_id, course_phase_id
`

func (q *Queries) ListAssessmentTemplateCoursePhaseMappings(ctx context.Context) ([]CoursePhaseConfig, error) {
	rows, err := q.db.Query(ctx, listAssessmentTemplateCoursePhaseMappings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoursePhaseConfig
	for rows.Next() {
		var i CoursePhaseConfig
		if err := rows.Scan(
			&i.AssessmentTemplateID,
			&i.CoursePhaseID,
			&i.Deadline,
			&i.SelfEvaluationEnabled,
			&i.SelfEvaluationTemplate,
			&i.SelfEvaluationDeadline,
			&i.PeerEvaluationEnabled,
			&i.PeerEvaluationTemplate,
			&i.PeerEvaluationDeadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
