// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: competency.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCompetency = `-- name: DeleteCompetency :exec
DELETE FROM competency
WHERE id = $1
`

func (q *Queries) DeleteCompetency(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompetency, id)
	return err
}

const getCompetencyByID = `-- name: GetCompetencyByID :one
SELECT id, super_competency_id, name, description
FROM competency
WHERE id = $1
`

func (q *Queries) GetCompetencyByID(ctx context.Context, id uuid.UUID) (Competency, error) {
	row := q.db.QueryRow(ctx, getCompetencyByID, id)
	var i Competency
	err := row.Scan(
		&i.ID,
		&i.SuperCompetencyID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getRootCompetencies = `-- name: GetRootCompetencies :many
SELECT id, super_competency_id, name, description
FROM competency
WHERE super_competency_id IS NULL
`

func (q *Queries) GetRootCompetencies(ctx context.Context) ([]Competency, error) {
	rows, err := q.db.Query(ctx, getRootCompetencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competency
	for rows.Next() {
		var i Competency
		if err := rows.Scan(
			&i.ID,
			&i.SuperCompetencyID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubCompetencies = `-- name: GetSubCompetencies :many
SELECT id, super_competency_id, name, description
FROM competency
WHERE super_competency_id = $1
`

func (q *Queries) GetSubCompetencies(ctx context.Context, superCompetencyID pgtype.UUID) ([]Competency, error) {
	rows, err := q.db.Query(ctx, getSubCompetencies, superCompetencyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competency
	for rows.Next() {
		var i Competency
		if err := rows.Scan(
			&i.ID,
			&i.SuperCompetencyID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCompetency = `-- name: InsertCompetency :exec
INSERT INTO competency (id, super_competency_id, name, description)
VALUES ($1, $2, $3, $4)
`

type InsertCompetencyParams struct {
	ID                uuid.UUID   `json:"id"`
	SuperCompetencyID pgtype.UUID `json:"super_competency_id"`
	Name              string      `json:"name"`
	Description       pgtype.Text `json:"description"`
}

func (q *Queries) InsertCompetency(ctx context.Context, arg InsertCompetencyParams) error {
	_, err := q.db.Exec(ctx, insertCompetency,
		arg.ID,
		arg.SuperCompetencyID,
		arg.Name,
		arg.Description,
	)
	return err
}

const updateCompetency = `-- name: UpdateCompetency :exec
UPDATE competency
SET super_competency_id = $2,
    name = $3,
    description = $4
WHERE id = $1
`

type UpdateCompetencyParams struct {
	ID                uuid.UUID   `json:"id"`
	SuperCompetencyID pgtype.UUID `json:"super_competency_id"`
	Name              string      `json:"name"`
	Description       pgtype.Text `json:"description"`
}

func (q *Queries) UpdateCompetency(ctx context.Context, arg UpdateCompetencyParams) error {
	_, err := q.db.Exec(ctx, updateCompetency,
		arg.ID,
		arg.SuperCompetencyID,
		arg.Name,
		arg.Description,
	)
	return err
}
