// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: competency.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCompetency = `-- name: CreateCompetency :exec
INSERT INTO competency (
    id, category_id, name, short_name, description, novice,
    intermediate, advanced, expert, weight
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateCompetencyParams struct {
	ID           uuid.UUID   `json:"id"`
	CategoryID   uuid.UUID   `json:"category_id"`
	Name         string      `json:"name"`
	ShortName    pgtype.Text `json:"short_name"`
	Description  pgtype.Text `json:"description"`
	Novice       string      `json:"novice"`
	Intermediate string      `json:"intermediate"`
	Advanced     string      `json:"advanced"`
	Expert       string      `json:"expert"`
	Weight       int32       `json:"weight"`
}

func (q *Queries) CreateCompetency(ctx context.Context, arg CreateCompetencyParams) error {
	_, err := q.db.Exec(ctx, createCompetency,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.ShortName,
		arg.Description,
		arg.Novice,
		arg.Intermediate,
		arg.Advanced,
		arg.Expert,
		arg.Weight,
	)
	return err
}

const deleteCompetency = `-- name: DeleteCompetency :exec
DELETE FROM competency WHERE id = $1
`

func (q *Queries) DeleteCompetency(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompetency, id)
	return err
}

const getCompetency = `-- name: GetCompetency :one
SELECT id, category_id, name, description, novice, intermediate, advanced, expert, weight, short_name FROM competency WHERE id = $1
`

func (q *Queries) GetCompetency(ctx context.Context, id uuid.UUID) (Competency, error) {
	row := q.db.QueryRow(ctx, getCompetency, id)
	var i Competency
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Novice,
		&i.Intermediate,
		&i.Advanced,
		&i.Expert,
		&i.Weight,
		&i.ShortName,
	)
	return i, err
}

const listCompetencies = `-- name: ListCompetencies :many
SELECT id, category_id, name, description, novice, intermediate, advanced, expert, weight, short_name FROM competency
`

func (q *Queries) ListCompetencies(ctx context.Context) ([]Competency, error) {
	rows, err := q.db.Query(ctx, listCompetencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competency
	for rows.Next() {
		var i Competency
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Novice,
			&i.Intermediate,
			&i.Advanced,
			&i.Expert,
			&i.Weight,
			&i.ShortName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompetenciesByCategory = `-- name: ListCompetenciesByCategory :many
SELECT id, category_id, name, description, novice, intermediate, advanced, expert, weight, short_name FROM competency WHERE category_id = $1
`

func (q *Queries) ListCompetenciesByCategory(ctx context.Context, categoryID uuid.UUID) ([]Competency, error) {
	rows, err := q.db.Query(ctx, listCompetenciesByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competency
	for rows.Next() {
		var i Competency
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Novice,
			&i.Intermediate,
			&i.Advanced,
			&i.Expert,
			&i.Weight,
			&i.ShortName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompetency = `-- name: UpdateCompetency :exec
UPDATE competency
SET category_id = $2,
    name = $3,
    short_name = $4,
    description = $5,
    novice = $6,
    intermediate = $7,
    advanced = $8,
    expert = $9,
    weight = $10
WHERE id = $1
`

type UpdateCompetencyParams struct {
	ID           uuid.UUID   `json:"id"`
	CategoryID   uuid.UUID   `json:"category_id"`
	Name         string      `json:"name"`
	ShortName    pgtype.Text `json:"short_name"`
	Description  pgtype.Text `json:"description"`
	Novice       string      `json:"novice"`
	Intermediate string      `json:"intermediate"`
	Advanced     string      `json:"advanced"`
	Expert       string      `json:"expert"`
	Weight       int32       `json:"weight"`
}

func (q *Queries) UpdateCompetency(ctx context.Context, arg UpdateCompetencyParams) error {
	_, err := q.db.Exec(ctx, updateCompetency,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.ShortName,
		arg.Description,
		arg.Novice,
		arg.Intermediate,
		arg.Advanced,
		arg.Expert,
		arg.Weight,
	)
	return err
}
