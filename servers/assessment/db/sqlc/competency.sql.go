// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: competency.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCompetency = `-- name: CreateCompetency :exec
INSERT INTO competency (
        id,
        category_id,
        name,
        short_name,
        description,
        description_very_bad,
        description_bad,
        description_ok,
        description_good,
        description_very_good,
        weight
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateCompetencyParams struct {
	ID                  uuid.UUID   `json:"id"`
	CategoryID          uuid.UUID   `json:"category_id"`
	Name                string      `json:"name"`
	ShortName           pgtype.Text `json:"short_name"`
	Description         pgtype.Text `json:"description"`
	DescriptionVeryBad  string      `json:"description_very_bad"`
	DescriptionBad      string      `json:"description_bad"`
	DescriptionOk       string      `json:"description_ok"`
	DescriptionGood     string      `json:"description_good"`
	DescriptionVeryGood string      `json:"description_very_good"`
	Weight              int32       `json:"weight"`
}

func (q *Queries) CreateCompetency(ctx context.Context, arg CreateCompetencyParams) error {
	_, err := q.db.Exec(ctx, createCompetency,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.ShortName,
		arg.Description,
		arg.DescriptionVeryBad,
		arg.DescriptionBad,
		arg.DescriptionOk,
		arg.DescriptionGood,
		arg.DescriptionVeryGood,
		arg.Weight,
	)
	return err
}

const deleteCompetency = `-- name: DeleteCompetency :exec
DELETE FROM competency
WHERE id = $1
`

func (q *Queries) DeleteCompetency(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompetency, id)
	return err
}

const getCompetency = `-- name: GetCompetency :one
SELECT id, category_id, name, description, weight, short_name, description_very_bad, description_bad, description_ok, description_good, description_very_good
FROM competency
WHERE id = $1
`

func (q *Queries) GetCompetency(ctx context.Context, id uuid.UUID) (Competency, error) {
	row := q.db.QueryRow(ctx, getCompetency, id)
	var i Competency
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Weight,
		&i.ShortName,
		&i.DescriptionVeryBad,
		&i.DescriptionBad,
		&i.DescriptionOk,
		&i.DescriptionGood,
		&i.DescriptionVeryGood,
	)
	return i, err
}

const listCompetencies = `-- name: ListCompetencies :many
SELECT id, category_id, name, description, weight, short_name, description_very_bad, description_bad, description_ok, description_good, description_very_good
FROM competency
`

func (q *Queries) ListCompetencies(ctx context.Context) ([]Competency, error) {
	rows, err := q.db.Query(ctx, listCompetencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competency
	for rows.Next() {
		var i Competency
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Weight,
			&i.ShortName,
			&i.DescriptionVeryBad,
			&i.DescriptionBad,
			&i.DescriptionOk,
			&i.DescriptionGood,
			&i.DescriptionVeryGood,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompetenciesByCategory = `-- name: ListCompetenciesByCategory :many
SELECT id, category_id, name, description, weight, short_name, description_very_bad, description_bad, description_ok, description_good, description_very_good
FROM competency
WHERE category_id = $1
`

func (q *Queries) ListCompetenciesByCategory(ctx context.Context, categoryID uuid.UUID) ([]Competency, error) {
	rows, err := q.db.Query(ctx, listCompetenciesByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competency
	for rows.Next() {
		var i Competency
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Weight,
			&i.ShortName,
			&i.DescriptionVeryBad,
			&i.DescriptionBad,
			&i.DescriptionOk,
			&i.DescriptionGood,
			&i.DescriptionVeryGood,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompetency = `-- name: UpdateCompetency :exec
UPDATE competency
SET category_id = $2,
    name = $3,
    short_name = $4,
    description = $5,
    description_very_bad = $6,
    description_bad = $7,
    description_ok = $8,
    description_good = $9,
    description_very_good = $10,
    weight = $11
WHERE id = $1
`

type UpdateCompetencyParams struct {
	ID                  uuid.UUID   `json:"id"`
	CategoryID          uuid.UUID   `json:"category_id"`
	Name                string      `json:"name"`
	ShortName           pgtype.Text `json:"short_name"`
	Description         pgtype.Text `json:"description"`
	DescriptionVeryBad  string      `json:"description_very_bad"`
	DescriptionBad      string      `json:"description_bad"`
	DescriptionOk       string      `json:"description_ok"`
	DescriptionGood     string      `json:"description_good"`
	DescriptionVeryGood string      `json:"description_very_good"`
	Weight              int32       `json:"weight"`
}

func (q *Queries) UpdateCompetency(ctx context.Context, arg UpdateCompetencyParams) error {
	_, err := q.db.Exec(ctx, updateCompetency,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.ShortName,
		arg.Description,
		arg.DescriptionVeryBad,
		arg.DescriptionBad,
		arg.DescriptionOk,
		arg.DescriptionGood,
		arg.DescriptionVeryGood,
		arg.Weight,
	)
	return err
}
