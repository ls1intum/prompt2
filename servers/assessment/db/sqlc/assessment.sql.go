// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: assessment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countRemainingAssessmentsForStudent = `-- name: CountRemainingAssessmentsForStudent :one
WITH total_competencies AS (
  SELECT COUNT(*) AS total
  FROM competency
),
assessed_competencies AS (
  SELECT COUNT(*) AS assessed
  FROM assessment a
  WHERE a.course_participation_id = $1
    AND a.course_phase_id = $2
),
remaining_per_category AS (
  SELECT c.category_id,
    COUNT(*) - COUNT(ass.id) AS remaining_assessments
  FROM competency c
    LEFT JOIN assessment ass ON ass.competency_id = c.id
    AND ass.course_participation_id = $1
    AND ass.course_phase_id = $2
  GROUP BY c.category_id
)
SELECT (
    SELECT total
    FROM total_competencies
  ) - (
    SELECT assessed
    FROM assessed_competencies
  ) AS remaining_assessments,
  json_agg(
    json_build_object(
      'categoryID',
      rpc.category_id,
      'remainingAssessments',
      rpc.remaining_assessments
    )
  ) AS categories
FROM remaining_per_category rpc
`

type CountRemainingAssessmentsForStudentParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

type CountRemainingAssessmentsForStudentRow struct {
	RemainingAssessments int32  `json:"remaining_assessments"`
	Categories           []byte `json:"categories"`
}

func (q *Queries) CountRemainingAssessmentsForStudent(ctx context.Context, arg CountRemainingAssessmentsForStudentParams) (CountRemainingAssessmentsForStudentRow, error) {
	row := q.db.QueryRow(ctx, countRemainingAssessmentsForStudent, arg.CourseParticipationID, arg.CoursePhaseID)
	var i CountRemainingAssessmentsForStudentRow
	err := row.Scan(&i.RemainingAssessments, &i.Categories)
	return i, err
}

const createAssessment = `-- name: CreateAssessment :exec
INSERT INTO assessment (
    id,
    course_participation_id,
    course_phase_id,
    competency_id,
    score_level,
    comment,
    assessed_at,
    author
  )
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    CURRENT_TIMESTAMP,
    $7
  )
`

type CreateAssessmentParams struct {
	ID                    uuid.UUID   `json:"id"`
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID   `json:"course_phase_id"`
	CompetencyID          uuid.UUID   `json:"competency_id"`
	ScoreLevel            ScoreLevel  `json:"score_level"`
	Comment               pgtype.Text `json:"comment"`
	Author                string      `json:"author"`
}

func (q *Queries) CreateAssessment(ctx context.Context, arg CreateAssessmentParams) error {
	_, err := q.db.Exec(ctx, createAssessment,
		arg.ID,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.CompetencyID,
		arg.ScoreLevel,
		arg.Comment,
		arg.Author,
	)
	return err
}

const deleteAssessment = `-- name: DeleteAssessment :exec
DELETE FROM assessment
WHERE id = $1
`

func (q *Queries) DeleteAssessment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssessment, id)
	return err
}

const getAssessment = `-- name: GetAssessment :one
SELECT id, course_participation_id, course_phase_id, competency_id, comment, assessed_at, author, score_level
FROM assessment
WHERE id = $1
`

func (q *Queries) GetAssessment(ctx context.Context, id uuid.UUID) (Assessment, error) {
	row := q.db.QueryRow(ctx, getAssessment, id)
	var i Assessment
	err := row.Scan(
		&i.ID,
		&i.CourseParticipationID,
		&i.CoursePhaseID,
		&i.CompetencyID,
		&i.Comment,
		&i.AssessedAt,
		&i.Author,
		&i.ScoreLevel,
	)
	return i, err
}

const listAssessmentsByCategoryInPhase = `-- name: ListAssessmentsByCategoryInPhase :many
SELECT a.id, a.course_participation_id, a.course_phase_id, a.competency_id, a.comment, a.assessed_at, a.author, a.score_level
FROM assessment a
  JOIN competency c ON a.competency_id = c.id
WHERE c.category_id = $1
  AND a.course_phase_id = $2
`

type ListAssessmentsByCategoryInPhaseParams struct {
	CategoryID    uuid.UUID `json:"category_id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListAssessmentsByCategoryInPhase(ctx context.Context, arg ListAssessmentsByCategoryInPhaseParams) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByCategoryInPhase, arg.CategoryID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
			&i.ScoreLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentsByCompetencyInPhase = `-- name: ListAssessmentsByCompetencyInPhase :many
SELECT id, course_participation_id, course_phase_id, competency_id, comment, assessed_at, author, score_level
FROM assessment
WHERE competency_id = $1
  AND course_phase_id = $2
`

type ListAssessmentsByCompetencyInPhaseParams struct {
	CompetencyID  uuid.UUID `json:"competency_id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListAssessmentsByCompetencyInPhase(ctx context.Context, arg ListAssessmentsByCompetencyInPhaseParams) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByCompetencyInPhase, arg.CompetencyID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
			&i.ScoreLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentsByCoursePhase = `-- name: ListAssessmentsByCoursePhase :many
SELECT id, course_participation_id, course_phase_id, competency_id, comment, assessed_at, author, score_level
FROM assessment
WHERE course_phase_id = $1
`

func (q *Queries) ListAssessmentsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
			&i.ScoreLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentsByStudentInPhase = `-- name: ListAssessmentsByStudentInPhase :many
SELECT id, course_participation_id, course_phase_id, competency_id, comment, assessed_at, author, score_level
FROM assessment
WHERE course_participation_id = $1
  AND course_phase_id = $2
`

type ListAssessmentsByStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListAssessmentsByStudentInPhase(ctx context.Context, arg ListAssessmentsByStudentInPhaseParams) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
			&i.ScoreLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssessment = `-- name: UpdateAssessment :exec
UPDATE assessment
SET score_level = $4,
  comment = $5,
  assessed_at = CURRENT_TIMESTAMP,
  author = $6
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND competency_id = $3
`

type UpdateAssessmentParams struct {
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID   `json:"course_phase_id"`
	CompetencyID          uuid.UUID   `json:"competency_id"`
	ScoreLevel            ScoreLevel  `json:"score_level"`
	Comment               pgtype.Text `json:"comment"`
	Author                string      `json:"author"`
}

func (q *Queries) UpdateAssessment(ctx context.Context, arg UpdateAssessmentParams) error {
	_, err := q.db.Exec(ctx, updateAssessment,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.CompetencyID,
		arg.ScoreLevel,
		arg.Comment,
		arg.Author,
	)
	return err
}
