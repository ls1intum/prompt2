// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: assessment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countRemainingAssessmentsForStudent = `-- name: CountRemainingAssessmentsForStudent :one
SELECT
  COUNT(*) - (
    SELECT COUNT(*)
    FROM assessment
    WHERE course_participation_id = $1
      AND course_phase_id = $2
  ) AS remaining_assessments
FROM competency
`

type CountRemainingAssessmentsForStudentParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) CountRemainingAssessmentsForStudent(ctx context.Context, arg CountRemainingAssessmentsForStudentParams) (int32, error) {
	row := q.db.QueryRow(ctx, countRemainingAssessmentsForStudent, arg.CourseParticipationID, arg.CoursePhaseID)
	var remaining_assessments int32
	err := row.Scan(&remaining_assessments)
	return remaining_assessments, err
}

const countRemainingAssessmentsPerCategory = `-- name: CountRemainingAssessmentsPerCategory :many
SELECT
  c.category_id,
  COUNT(*) - (
    SELECT COUNT(*)
    FROM assessment a
    WHERE a.course_participation_id = $1
      AND a.course_phase_id = $2
      AND a.competency_id IN (
        SELECT id FROM competency WHERE competency.category_id = c.category_id
      )
  ) AS remaining_assessments
FROM competency c
GROUP BY c.category_id
`

type CountRemainingAssessmentsPerCategoryParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

type CountRemainingAssessmentsPerCategoryRow struct {
	CategoryID           uuid.UUID `json:"category_id"`
	RemainingAssessments int32     `json:"remaining_assessments"`
}

func (q *Queries) CountRemainingAssessmentsPerCategory(ctx context.Context, arg CountRemainingAssessmentsPerCategoryParams) ([]CountRemainingAssessmentsPerCategoryRow, error) {
	rows, err := q.db.Query(ctx, countRemainingAssessmentsPerCategory, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountRemainingAssessmentsPerCategoryRow
	for rows.Next() {
		var i CountRemainingAssessmentsPerCategoryRow
		if err := rows.Scan(&i.CategoryID, &i.RemainingAssessments); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAssessment = `-- name: CreateAssessment :exec
INSERT INTO assessment (
    id, course_participation_id, course_phase_id, competency_id,
    score, comment, assessed_at, author
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateAssessmentParams struct {
	ID                    uuid.UUID        `json:"id"`
	CourseParticipationID uuid.UUID        `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID        `json:"course_phase_id"`
	CompetencyID          uuid.UUID        `json:"competency_id"`
	Score                 ScoreLevel       `json:"score"`
	Comment               pgtype.Text      `json:"comment"`
	AssessedAt            pgtype.Timestamp `json:"assessed_at"`
	Author                string           `json:"author"`
}

func (q *Queries) CreateAssessment(ctx context.Context, arg CreateAssessmentParams) error {
	_, err := q.db.Exec(ctx, createAssessment,
		arg.ID,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.CompetencyID,
		arg.Score,
		arg.Comment,
		arg.AssessedAt,
		arg.Author,
	)
	return err
}

const deleteAssessment = `-- name: DeleteAssessment :exec
DELETE FROM assessment WHERE id = $1
`

func (q *Queries) DeleteAssessment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssessment, id)
	return err
}

const getAssessment = `-- name: GetAssessment :one
SELECT id, course_participation_id, course_phase_id, competency_id, score, comment, assessed_at, author FROM assessment WHERE id = $1
`

func (q *Queries) GetAssessment(ctx context.Context, id uuid.UUID) (Assessment, error) {
	row := q.db.QueryRow(ctx, getAssessment, id)
	var i Assessment
	err := row.Scan(
		&i.ID,
		&i.CourseParticipationID,
		&i.CoursePhaseID,
		&i.CompetencyID,
		&i.Score,
		&i.Comment,
		&i.AssessedAt,
		&i.Author,
	)
	return i, err
}

const listAssessmentsByCategoryInPhase = `-- name: ListAssessmentsByCategoryInPhase :many
SELECT a.id, a.course_participation_id, a.course_phase_id, a.competency_id, a.score, a.comment, a.assessed_at, a.author
FROM assessment a
JOIN competency c ON a.competency_id = c.id
WHERE c.category_id = $1
  AND a.course_phase_id = $2
`

type ListAssessmentsByCategoryInPhaseParams struct {
	CategoryID    uuid.UUID `json:"category_id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListAssessmentsByCategoryInPhase(ctx context.Context, arg ListAssessmentsByCategoryInPhaseParams) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByCategoryInPhase, arg.CategoryID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Score,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentsByCompetencyInPhase = `-- name: ListAssessmentsByCompetencyInPhase :many
SELECT id, course_participation_id, course_phase_id, competency_id, score, comment, assessed_at, author 
FROM assessment 
WHERE competency_id = $1 
  AND course_phase_id = $2
`

type ListAssessmentsByCompetencyInPhaseParams struct {
	CompetencyID  uuid.UUID `json:"competency_id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListAssessmentsByCompetencyInPhase(ctx context.Context, arg ListAssessmentsByCompetencyInPhaseParams) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByCompetencyInPhase, arg.CompetencyID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Score,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentsByCoursePhase = `-- name: ListAssessmentsByCoursePhase :many
SELECT id, course_participation_id, course_phase_id, competency_id, score, comment, assessed_at, author FROM assessment WHERE course_phase_id = $1
`

func (q *Queries) ListAssessmentsByCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Score,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssessmentsByStudentInPhase = `-- name: ListAssessmentsByStudentInPhase :many
SELECT id, course_participation_id, course_phase_id, competency_id, score, comment, assessed_at, author
FROM assessment
WHERE course_participation_id = $1
  AND course_phase_id = $2
`

type ListAssessmentsByStudentInPhaseParams struct {
	CourseParticipationID uuid.UUID `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID `json:"course_phase_id"`
}

func (q *Queries) ListAssessmentsByStudentInPhase(ctx context.Context, arg ListAssessmentsByStudentInPhaseParams) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, listAssessmentsByStudentInPhase, arg.CourseParticipationID, arg.CoursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.CourseParticipationID,
			&i.CoursePhaseID,
			&i.CompetencyID,
			&i.Score,
			&i.Comment,
			&i.AssessedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAssessment = `-- name: UpdateAssessment :exec
UPDATE assessment
SET
  score = $4,
  comment = $5,
  assessed_at = $6,
  author = $7
WHERE course_participation_id = $1
  AND course_phase_id = $2
  AND competency_id = $3
`

type UpdateAssessmentParams struct {
	CourseParticipationID uuid.UUID        `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID        `json:"course_phase_id"`
	CompetencyID          uuid.UUID        `json:"competency_id"`
	Score                 ScoreLevel       `json:"score"`
	Comment               pgtype.Text      `json:"comment"`
	AssessedAt            pgtype.Timestamp `json:"assessed_at"`
	Author                string           `json:"author"`
}

func (q *Queries) UpdateAssessment(ctx context.Context, arg UpdateAssessmentParams) error {
	_, err := q.db.Exec(ctx, updateAssessment,
		arg.CourseParticipationID,
		arg.CoursePhaseID,
		arg.CompetencyID,
		arg.Score,
		arg.Comment,
		arg.AssessedAt,
		arg.Author,
	)
	return err
}
