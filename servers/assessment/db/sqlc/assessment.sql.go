// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: assessment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAssessment = `-- name: DeleteAssessment :exec
DELETE FROM assessment
WHERE id = $1
`

// Deletes an assessment by its id.
func (q *Queries) DeleteAssessment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAssessment, id)
	return err
}

const getAssessmentByCompetencyAndAssessee = `-- name: GetAssessmentByCompetencyAndAssessee :one
SELECT id, assessor_id, assessee_id, competency_id, score, comment, assessed_at
FROM assessment
WHERE assessee_id = $1
  AND competency_id = $2
`

type GetAssessmentByCompetencyAndAssesseeParams struct {
	AssesseeID   uuid.UUID `json:"assessee_id"`
	CompetencyID uuid.UUID `json:"competency_id"`
}

// Returns an assessment for a given assessee on a specific competency.
func (q *Queries) GetAssessmentByCompetencyAndAssessee(ctx context.Context, arg GetAssessmentByCompetencyAndAssesseeParams) (Assessment, error) {
	row := q.db.QueryRow(ctx, getAssessmentByCompetencyAndAssessee, arg.AssesseeID, arg.CompetencyID)
	var i Assessment
	err := row.Scan(
		&i.ID,
		&i.AssessorID,
		&i.AssesseeID,
		&i.CompetencyID,
		&i.Score,
		&i.Comment,
		&i.AssessedAt,
	)
	return i, err
}

const getAssessmentsForAssessee = `-- name: GetAssessmentsForAssessee :many
SELECT id, assessor_id, assessee_id, competency_id, score, comment, assessed_at
FROM assessment
WHERE assessee_id = $1
ORDER BY assessed_at DESC
`

// Returns all assessments for a given assessee (student) ordered by assessment date.
func (q *Queries) GetAssessmentsForAssessee(ctx context.Context, assesseeID uuid.UUID) ([]Assessment, error) {
	rows, err := q.db.Query(ctx, getAssessmentsForAssessee, assesseeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Assessment
	for rows.Next() {
		var i Assessment
		if err := rows.Scan(
			&i.ID,
			&i.AssessorID,
			&i.AssesseeID,
			&i.CompetencyID,
			&i.Score,
			&i.Comment,
			&i.AssessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAssessment = `-- name: InsertAssessment :exec
INSERT INTO assessment (id, assessor_id, assessee_id, competency_id, score, comment, assessed_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertAssessmentParams struct {
	ID           uuid.UUID        `json:"id"`
	AssessorID   uuid.UUID        `json:"assessor_id"`
	AssesseeID   uuid.UUID        `json:"assessee_id"`
	CompetencyID uuid.UUID        `json:"competency_id"`
	Score        int16            `json:"score"`
	Comment      pgtype.Text      `json:"comment"`
	AssessedAt   pgtype.Timestamp `json:"assessed_at"`
}

// Inserts a new assessment.
func (q *Queries) InsertAssessment(ctx context.Context, arg InsertAssessmentParams) error {
	_, err := q.db.Exec(ctx, insertAssessment,
		arg.ID,
		arg.AssessorID,
		arg.AssesseeID,
		arg.CompetencyID,
		arg.Score,
		arg.Comment,
		arg.AssessedAt,
	)
	return err
}

const updateAssessment = `-- name: UpdateAssessment :exec
UPDATE assessment
SET score = $2,
    comment = $3,
    assessed_at = $4
WHERE id = $1
`

type UpdateAssessmentParams struct {
	ID         uuid.UUID        `json:"id"`
	Score      int16            `json:"score"`
	Comment    pgtype.Text      `json:"comment"`
	AssessedAt pgtype.Timestamp `json:"assessed_at"`
}

// Updates an existing assessment.
func (q *Queries) UpdateAssessment(ctx context.Context, arg UpdateAssessmentParams) error {
	_, err := q.db.Exec(ctx, updateAssessment,
		arg.ID,
		arg.Score,
		arg.Comment,
		arg.AssessedAt,
	)
	return err
}
