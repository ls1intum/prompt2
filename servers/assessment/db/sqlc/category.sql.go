// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (id, name, description, weight)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, weight
`

type CreateCategoryParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Weight      int32       `json:"weight"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Weight,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Weight,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoriesWithCompetencies = `-- name: GetCategoriesWithCompetencies :many
SELECT
    c.id, c.name, c.description, c.weight,
    COALESCE(
        json_agg(
            json_build_object(
                'id', cmp.id,
                'name', cmp.name,
                'description', cmp.description,
                'novice', cmp.novice,
                'intermediate', cmp.intermediate,
                'advanced', cmp.advanced,
                'expert', cmp.expert,
                'weight', cmp.weight
            )
        ) FILTER (WHERE cmp.id IS NOT NULL),
        '[]'
    )::json AS competencies
FROM category c
LEFT JOIN competency cmp ON c.id = cmp.category_id
GROUP BY c.id, c.name, c.description, c.weight
`

type GetCategoriesWithCompetenciesRow struct {
	ID           uuid.UUID   `json:"id"`
	Name         string      `json:"name"`
	Description  pgtype.Text `json:"description"`
	Weight       int32       `json:"weight"`
	Competencies []byte      `json:"competencies"`
}

func (q *Queries) GetCategoriesWithCompetencies(ctx context.Context) ([]GetCategoriesWithCompetenciesRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesWithCompetencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesWithCompetenciesRow
	for rows.Next() {
		var i GetCategoriesWithCompetenciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Weight,
			&i.Competencies,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, description, weight FROM category WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Weight,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description, weight FROM category
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET name = $2, description = $3, weight = $4
WHERE id = $1
RETURNING id, name, description, weight
`

type UpdateCategoryParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Weight      int32       `json:"weight"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Weight,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Weight,
	)
	return i, err
}
