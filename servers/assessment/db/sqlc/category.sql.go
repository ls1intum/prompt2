// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (id, name, description)
VALUES ($1, $2, $3)
RETURNING id, name, description
`

type CreateCategoryParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.ID, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoriesWithCompetencies = `-- name: GetCategoriesWithCompetencies :many
SELECT
    c.id, c.name, c.description,
    cmp.id AS competency_id, cmp.category_id, cmp.name AS competency_name,
    cmp.description AS competency_description, cmp.novice, cmp.intermediate,
    cmp.advanced, cmp.expert
FROM category c
JOIN competency cmp ON c.id = cmp.category_id
`

type GetCategoriesWithCompetenciesRow struct {
	ID                    uuid.UUID   `json:"id"`
	Name                  string      `json:"name"`
	Description           pgtype.Text `json:"description"`
	CompetencyID          uuid.UUID   `json:"competency_id"`
	CategoryID            uuid.UUID   `json:"category_id"`
	CompetencyName        string      `json:"competency_name"`
	CompetencyDescription pgtype.Text `json:"competency_description"`
	Novice                string      `json:"novice"`
	Intermediate          string      `json:"intermediate"`
	Advanced              string      `json:"advanced"`
	Expert                string      `json:"expert"`
}

func (q *Queries) GetCategoriesWithCompetencies(ctx context.Context) ([]GetCategoriesWithCompetenciesRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesWithCompetencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesWithCompetenciesRow
	for rows.Next() {
		var i GetCategoriesWithCompetenciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CompetencyID,
			&i.CategoryID,
			&i.CompetencyName,
			&i.CompetencyDescription,
			&i.Novice,
			&i.Intermediate,
			&i.Advanced,
			&i.Expert,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, description FROM category WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description FROM category
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
SET name = $2, description = $3
WHERE id = $1
RETURNING id, name, description
`

type UpdateCategoryParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
