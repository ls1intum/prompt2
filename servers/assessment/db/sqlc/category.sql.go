// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO category (id, name, short_name, description, weight, assessment_template_id)
VALUES ($1, $2, $3, $4, $5,
        (SELECT assessment_template_id
         FROM course_phase_info
         WHERE course_phase_id = $6))
`

type CreateCategoryParams struct {
	ID            uuid.UUID   `json:"id"`
	Name          string      `json:"name"`
	ShortName     pgtype.Text `json:"short_name"`
	Description   pgtype.Text `json:"description"`
	Weight        int32       `json:"weight"`
	CoursePhaseID uuid.UUID   `json:"course_phase_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.ShortName,
		arg.Description,
		arg.Weight,
		arg.CoursePhaseID,
	)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM category
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategoriesWithCompetencies = `-- name: GetCategoriesWithCompetencies :many
SELECT c.id,
       c.name,
       c.short_name,
       c.description,
       c.weight,
       COALESCE(
                       json_agg(
                       json_build_object(
                               'id',
                               cmp.id,
                               'categoryID',
                               cmp.category_id,
                               'name',
                               cmp.name,
                               'shortName',
                               cmp.short_name,
                               'description',
                               cmp.description,
                               'descriptionVeryBad',
                               cmp.description_very_bad,
                               'descriptionBad',
                               cmp.description_bad,
                               'descriptionOk',
                               cmp.description_ok,
                               'descriptionGood',
                               cmp.description_good,
                               'descriptionVeryGood',
                               cmp.description_very_good,
                               'weight',
                               cmp.weight
                       )
                               ) FILTER (
                           WHERE cmp.id IS NOT NULL
                           ),
                       '[]'
       )::json AS competencies
FROM category c
         LEFT JOIN competency cmp ON c.id = cmp.category_id
         INNER JOIN category_course_phase ccp ON c.id = ccp.category_id
WHERE ccp.course_phase_id = $1
GROUP BY c.id, c.name, c.short_name, c.description, c.weight
ORDER BY c.name ASC
`

type GetCategoriesWithCompetenciesRow struct {
	ID           uuid.UUID   `json:"id"`
	Name         string      `json:"name"`
	ShortName    pgtype.Text `json:"short_name"`
	Description  pgtype.Text `json:"description"`
	Weight       int32       `json:"weight"`
	Competencies []byte      `json:"competencies"`
}

func (q *Queries) GetCategoriesWithCompetencies(ctx context.Context, coursePhaseID uuid.UUID) ([]GetCategoriesWithCompetenciesRow, error) {
	rows, err := q.db.Query(ctx, getCategoriesWithCompetencies, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesWithCompetenciesRow
	for rows.Next() {
		var i GetCategoriesWithCompetenciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.Description,
			&i.Weight,
			&i.Competencies,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, description, weight, short_name, assessment_template_id
FROM category
WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Weight,
		&i.ShortName,
		&i.AssessmentTemplateID,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description, weight, short_name, assessment_template_id
FROM category
ORDER BY name ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Weight,
			&i.ShortName,
			&i.AssessmentTemplateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE category
SET name                   = $2,
    short_name             = $3,
    description            = $4,
    weight                 = $5,
    assessment_template_id = (SELECT assessment_template_id
                              FROM course_phase_info
                              WHERE course_phase_id = $6)
WHERE id = $1
`

type UpdateCategoryParams struct {
	ID            uuid.UUID   `json:"id"`
	Name          string      `json:"name"`
	ShortName     pgtype.Text `json:"short_name"`
	Description   pgtype.Text `json:"description"`
	Weight        int32       `json:"weight"`
	CoursePhaseID uuid.UUID   `json:"course_phase_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.ShortName,
		arg.Description,
		arg.Weight,
		arg.CoursePhaseID,
	)
	return err
}
