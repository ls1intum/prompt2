openapi: 3.0.3
info:
  title: Prompt Assessment Service
  description: API for managing categories, competencies, and assessments for course phases.
  version: 1.0.0

servers:
  - url: http://{assessmentServerURL}/assessment/api/course_phase/{coursePhaseID}
    variables:
      assessmentServerURL:
        description: URL of the assessment server
        default: localhost:8084
      coursePhaseID:
        description: ID of the course phase
        default: example-course-phase-id

tags:
  - name: Category
    description: Categories to group competencies
  - name: Competency
    description: Competency definitions and CRUD
  - name: Assessment
    description: Tutor or peer evaluations for competencies

paths:
  ############################
  # Category Endpoints
  ############################
  /category:
    get:
      summary: List all categories
      tags: [Category]
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      summary: Create a new category
      tags: [Category]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequest"
      responses:
        "201":
          description: Category created

  /category/{categoryID}:
    get:
      summary: Get a category by ID
      tags: [Category]
      parameters:
        - name: categoryID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The requested category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
    put:
      summary: Update a category
      tags: [Category]
      parameters:
        - name: categoryID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategoryRequest"
      responses:
        "200":
          description: Category updated
    delete:
      summary: Delete a category
      tags: [Category]
      parameters:
        - name: categoryID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Category deleted

  /category/with-competencies:
    get:
      summary: List categories joined with their competencies
      tags: [Category]
      responses:
        "200":
          description: Returns categories, each with a list of competencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryWithCompetencies"

  ############################
  # Competency Endpoints
  ############################
  /competency:
    get:
      summary: List all competencies
      tags: [Competency]
      responses:
        "200":
          description: A list of competencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Competency"
    post:
      summary: Create a new competency
      tags: [Competency]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCompetencyRequest"
      responses:
        "201":
          description: Competency created

  /competency/{competencyID}:
    get:
      summary: Get a competency by ID
      tags: [Competency]
      parameters:
        - name: competencyID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The requested competency
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Competency"
    put:
      summary: Update a competency
      tags: [Competency]
      parameters:
        - name: competencyID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCompetencyRequest"
      responses:
        "200":
          description: Competency updated
    delete:
      summary: Delete a competency
      tags: [Competency]
      parameters:
        - name: competencyID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Competency deleted

  /competency/category/{categoryID}:
    get:
      summary: Get all competencies for a particular category
      tags: [Competency]
      parameters:
        - name: categoryID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of competencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Competency"

  ############################
  # Assessment Endpoints
  ############################
  /student-assessment:
    get:
      summary: Get all assessments in a course phase
      tags: [Assessment]
      parameters:
        - name: coursePhaseID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of assessments in the specified course phase
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assessment"
    post:
      summary: Create an assessment
      description: Creates a new assessment.
      tags: [Assessment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateAssessmentRequest"
      responses:
        "201":
          description: Assessment created
    put:
      summary: Update an assessment
      description: Creates a new assessment if none exists for the specified combination; otherwise updates the existing one.
      tags: [Assessment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrUpdateAssessmentRequest"
      responses:
        "200":
          description: Assessment created or updated

  /student-assessment/{courseParticipationID}:
    get:
      summary: Get the student assessment fo an object in a course phase
      tags: [Assessment]
      parameters:
        - name: courseParticipationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The requested assessment
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentAssessment"

  /student-assessment/{assessmentID}:
    delete:
      summary: Delete an assessment
      tags: [Assessment]
      parameters:
        - name: assessmentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Assessment deleted

  /student-assessment/course-participation/{courseParticipationID}:
    get:
      summary: Get all assessments for a student in a particular course phase
      tags: [Assessment]
      parameters:
        - name: courseParticipationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of assessments for the specified student in the specified course phase
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assessment"

  /student-assessment/competency/{competencyID}:
    get:
      summary: Get all assessments for a competency
      tags: [Assessment]
      parameters:
        - name: competencyID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of assessments for the specified competency
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assessment"

  /student-assessment/category/{categoryID}:
    get:
      summary: Get all assessments for a category
      tags: [Assessment]
      parameters:
        - name: categoryID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of assessments for the specified category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Assessment"

  /student-assessment/remaining/{courseParticipationID}:
    get:
      summary: Get count of remaining assessments for a student
      tags: [Assessment]
      parameters:
        - name: coursePhaseID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: courseParticipationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Count of remaining assessments
          content:
            application/json:
              schema:
                type: object
                properties:
                  remainingAssessments:
                    $ref: "#/components/schemas/RemainingAssessments"

  /student-assessment/completed:
    post:
      summary: Mark an Assessment of a student as completed
      tags: [Assessment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssessmentCompletion"
      responses:
        "201":
          description: Assessment marked as completed

  /student-assessment/completed/course-participation/{courseParticipationID}:
    get:
      summary: Get AssessmentCompletion for a student, if it exists
      tags: [Assessment]
      parameters:
        - name: courseParticipationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: AssessmentCompletion for the specified student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssessmentCompletion"
    delete:
      summary: Unmark an AssessmentCompletion of a student
      tags: [Assessment]
      parameters:
        - name: courseParticipationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: AssessmentCompletion deleted

  /student-assessment/score-level:
    get:
      summary: Get all score levels in a phase
      tags: [Assessment]
      responses:
        "200":
          description: List of score levels in the specified course phase
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ScoreLevelWithParticipation"

  /student-assessment/score-level/{courseParticipationID}:
    get:
      summary: Get the score level for a student
      tags: [Assessment]
      parameters:
        - name: courseParticipationID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The score level for the specified student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScoreLevelWithParticipation"

components:
  schemas:
    ################################
    # Category Schemas
    ################################
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        weight:
          type: integer

    CreateCategoryRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        description:
          type: string
        weight:
          type: integer

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        weight:
          type: integer

    CategoryWithCompetencies:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        weight:
          type: integer
        competencies:
          type: array
          items:
            $ref: "#/components/schemas/Competency"

    CategoryWithRemainingAssessments:
      type: object
      properties:
        categoryID:
          type: string
          format: uuid
        remainingAssessments:
          type: integer

    ################################
    # Competency Schemas
    ################################
    Competency:
      type: object
      properties:
        id:
          type: string
          format: uuid
        categoryID:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        novice:
          type: string
        intermediate:
          type: string
        advanced:
          type: string
        expert:
          type: string
        weight:
          type: integer

    CreateCompetencyRequest:
      type: object
      properties:
        categoryID:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        novice:
          type: string
        intermediate:
          type: string
        advanced:
          type: string
        expert:
          type: string
        weight:
          type: integer

    UpdateCompetencyRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        novice:
          type: string
        intermediate:
          type: string
        advanced:
          type: string
        expert:
          type: string
        weight:
          type: integer

    ################################
    # Assessment Schemas
    ################################
    ScoreLevel:
      type: string
      enum:
        - novice
        - intermediate
        - advanced
        - expert

    Assessment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        courseParticipationID:
          type: string
          format: uuid
        coursePhaseID:
          type: string
          format: uuid
        competencyID:
          type: string
          format: uuid
        score:
          $ref: "#/components/schemas/ScoreLevel"
        comment:
          type: string
        assessedAt:
          type: string
        author:
          type: string

    CreateOrUpdateAssessmentRequest:
      type: object
      properties:
        courseParticipationID:
          type: string
          format: uuid
        coursePhaseID:
          type: string
          format: uuid
        competencyID:
          type: string
          format: uuid
        score:
          type: string
          enum:
            - novice
            - intermediate
            - advanced
            - expert
        comment:
          type: string
        assessedAt:
          type: string
        author:
          type: string

    RemainingAssessments:
      type: object
      properties:
        remainingAssessments:
          type: integer
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryWithRemainingAssessments"

    AssessmentCompletion:
      type: object
      properties:
        coursePhaseID:
          type: string
          format: uuid
        courseParticipationID:
          type: string
          format: uuid
        completedAt:
          type: string
          format: date-time
        author:
          type: string
        completed:
          type: boolean

    ScoreLevelWithParticipation:
      type: object
      properties:
        courseParticipationID:
          type: string
          format: uuid
        scoreLevel:
          $ref: "#/components/schemas/ScoreLevel"

    StudentScore:
      type: object
      properties:
        scoreLevel:
          $ref: "#/components/schemas/ScoreLevel"
        score:
          type: number

    StudentAssessment:
      type: object
      properties:
        coursePhaseID:
          type: string
          format: uuid
        courseParticipationID:
          type: string
          format: uuid
        assessments:
          type: array
          items:
            $ref: "#/components/schemas/Assessment"
        remainingAssessments:
          $ref: "#/components/schemas/RemainingAssessments"
        assessmentCompletion:
          $ref: "#/components/schemas/AssessmentCompletion"
        studentScore:
          $ref: "#/components/schemas/StudentScore"
