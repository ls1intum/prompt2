name: Deploy a file to the VM

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      core_image_tag:
        required: true
        type: string
      template_image_tag:
        required: true
        type: string
      interview_image_tag:
        required: true
        type: string
      matching_image_tag:
        required: true
        type: string
      intro_course_developer_image_tag:
        required: true
        type: string
      intro_course_tutor_image_tag:
        required: true
        type: string
      server_core_image_tag:
        required: true
        type: string
      server_intro_course_image_tag:
        required: true
        type: string
      server_team_allocation_image_tag:
        required: true
        type: string
      server_self_team_allocation_image_tag:
        required: true
        type: string
      server_assessment_image_tag:
        required: true
        type: string
      assessment_image_tag:
        required: true
        type: string
      devops_challenge_image_tag:
        required: true
        type: string
      team_allocation_image_tag:
        required: true
        type: string

    secrets:
      VM_SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: "https://${{ vars.CORE_HOST }}"
    steps:
      - name: SSH to VM and Execute Docker-Compose Down
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          # Defined in the Org
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
          script: |
            docker compose -f docker-compose.prod.yml --env-file=.env.prod down --remove-orphans --rmi all

      - name: checkout
        uses: actions/checkout@v4

      - name: Copy file to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          # Defined in the Org
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
          #####################
          source: "./docker-compose.prod.yml"
          target: /home/${{ vars.VM_USERNAME }}

      - name: "Create main.cf and master.cf file"
        run: |
          echo "${{ vars.POSTFIX_MAIN_CF }}" > main.cf
          echo "${{ vars.POSTFIX_MASTER_CF }}" > master.cf

      - name: Copy main.cf to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          # Defined in the Org
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
          #####################
          source: "main.cf"
          target: /home/${{ vars.VM_USERNAME }}/postfix-config/

      - name: Copy master.cf to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          # Defined in the Org
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
          #####################
          source: "master.cf"
          target: /home/${{ vars.VM_USERNAME }}/postfix-config/

      - name: SSH to VM and create .env.prod file
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          # Defined in the Org
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
          script: |
            touch .env.prod 
            echo "ENVIRONMENT=production" > .env.prod
            echo "CORE_HOST=${{ vars.CORE_HOST }}" >> .env.prod
            echo "SERVER_CORE_HOST=${{ vars.SERVER_CORE_HOST }}" >> .env.prod
            echo "INTRO_COURSE_HOST=${{ vars.INTRO_COURSE_HOST }}" >> .env.prod
            echo "DEVOPS_CHALLENGE_HOST=${{ vars.DEVOPS_CHALLENGE_HOST }}" >> .env.prod
            echo "TEAM_ALLOCATION_HOST=${{ vars.TEAM_ALLOCATION_HOST }}" >> .env.prod
            echo "SELF_TEAM_ALLOCATION_HOST=${{ vars.SELF_TEAM_ALLOCATION_HOST }}" >> .env.prod
            echo "ASSESSMENT_HOST=${{ vars.ASSESSMENT_HOST }}" >> .env.prod
            echo "CHAIR_NAME_SHORT=${{ vars.CHAIR_NAME_SHORT }}" >> .env.prod
            echo "CHAIR_NAME_LONG=${{ vars.CHAIR_NAME_LONG }}" >> .env.prod


            echo "SERVER_ADDRESS=${{ vars.SERVER_ADDRESS }}" >> .env.prod 
            echo "DB_HOST=${{ vars.DB_HOST }}" >> .env.prod
            echo "DB_PORT=${{ vars.DB_PORT }}" >> .env.prod
            echo "DB_NAME=${{ vars.DB_NAME }}" >> .env.prod
            echo "DB_USER=${{ vars.DB_USER }}" >> .env.prod
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.prod
            echo "DB_HOST_INTRO_COURSE=${{ vars.DB_HOST_INTRO_COURSE }}" >> .env.prod
            echo "DB_PORT_INTRO_COURSE=${{ vars.DB_PORT_INTRO_COURSE }}" >> .env.prod
            echo "DB_HOST_TEAM_ALLOCATION=${{ vars.DB_HOST_TEAM_ALLOCATION }}" >> .env.prod
            echo "DB_PORT_TEAM_ALLOCATION=${{ vars.DB_PORT_TEAM_ALLOCATION }}" >> .env.prod
            echo "DB_HOST_SELF_TEAM_ALLOCATION=${{ vars.DB_HOST_SELF_TEAM_ALLOCATION }}" >> .env.prod
            echo "DB_PORT_SELF_TEAM_ALLOCATION=${{ vars.DB_PORT_SELF_TEAM_ALLOCATION }}" >> .env.prod

            echo "KEYCLOAK_HOST=${{ vars.KEYCLOAK_HOST }}" >> .env.prod
            echo "KEYCLOAK_REALM_NAME=${{ vars.KEYCLOAK_REALM_NAME }}" >> .env.prod
            echo "KEYCLOAK_CLIENT_ID=${{ vars.KEYCLOAK_CLIENT_ID }}" >> .env.prod
            echo "KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}" >> .env.prod
            echo "KEYCLOAK_ID_OF_CLIENT=${{ vars.KEYCLOAK_ID_OF_SERVER_CLIENT }}" >> .env.prod
            echo "KEYCLOAK_AUTHORIZED_PARTY=${{ vars.KEYCLOAK_AUTHORIZED_PARTY }}" >> .env.prod

            echo "GITHUB_SHA=${{ github.sha }}" >> .env.prod
            echo "GITHUB_REF=${{ github.head_ref }}" >> .env.prod
            echo "SERVER_CORE_IMAGE_TAG=${{ inputs.server_core_image_tag }}" >> .env.prod
            echo "SERVER_INTRO_COURSE_IMAGE_TAG=${{ inputs.server_intro_course_image_tag }}" >> .env.prod
            echo "SERVER_TEAM_ALLOCATION_IMAGE_TAG=${{ inputs.server_team_allocation_image_tag }}" >> .env.prod
            echo "SERVER_ASSESSMENT_IMAGE_TAG=${{ inputs.server_assessment_image_tag }}" >> .env.prod
            echo "CORE_IMAGE_TAG=${{ inputs.core_image_tag }}" >> .env.prod
            echo "TEMPLATE_IMAGE_TAG=${{ inputs.template_image_tag }}" >> .env.prod
            echo "INTERVIEW_IMAGE_TAG=${{ inputs.interview_image_tag }}" >> .env.prod
            echo "MATCHING_IMAGE_TAG=${{ inputs.matching_image_tag }}" >> .env.prod
            echo "INTRO_COURSE_DEVELOPER_IMAGE_TAG=${{ inputs.intro_course_developer_image_tag }}" >> .env.prod
            echo "INTRO_COURSE_TUTOR_IMAGE_TAG=${{ inputs.intro_course_tutor_image_tag }}" >> .env.prod
            echo "ASSESSMENT_IMAGE_TAG=${{ inputs.assessment_image_tag }}" >> .env.prod
            echo "DEVOPS_CHALLENGE_IMAGE_TAG=${{ inputs.devops_challenge_image_tag }}" >> .env.prod
            echo "TEAM_ALLOCATION_IMAGE_TAG=${{ inputs.team_allocation_image_tag }}" >> .env.prod
            echo "SELF_TEAM_ALLOCATION_IMAGE_TAG=${{ inputs.self_team_allocation_image_tag }}" >> .env.prod


            echo "SENDER_EMAIL=${{ vars.SENDER_EMAIL_ADDRESS }}" >> .env.prod
            echo "SENDER_NAME=${{ vars.SENDER_EMAIL_NAME }}" >> .env.prod
            echo "SMTP_HOST=${{ vars.SMTP_HOST }}" >> .env.prod
            echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env.prod

            echo "GITLAB_ACCESS_TOKEN=${{ vars.GITLAB_ACCESS_TOKEN }}" >> .env.prod

      - name: SSH to VM and Execute Docker-Compose Up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.DEPLOYMENT_GATEWAY_SSH_KEY }}
          proxy_port: ${{ vars.DEPLOYMENT_GATEWAY_PORT }}
          script: |
            docker compose -f docker-compose.prod.yml --env-file=.env.prod up --pull=always -d
