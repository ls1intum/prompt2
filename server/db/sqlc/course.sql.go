// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkCoursePhasesBelongToCourse = `-- name: CheckCoursePhasesBelongToCourse :one
WITH matched_phases AS (
  SELECT id
  FROM course_phase
  WHERE id = ANY($1::uuid[])
    AND course_id = $2
)
SELECT CASE 
         WHEN COUNT(*) = cardinality($1::uuid[]) THEN true 
         ELSE false 
       END AS all_exist_and_match_course
FROM matched_phases
`

type CheckCoursePhasesBelongToCourseParams struct {
	Column1  []uuid.UUID `json:"column_1"`
	CourseID uuid.UUID   `json:"course_id"`
}

func (q *Queries) CheckCoursePhasesBelongToCourse(ctx context.Context, arg CheckCoursePhasesBelongToCourseParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkCoursePhasesBelongToCourse, arg.Column1, arg.CourseID)
	var all_exist_and_match_course bool
	err := row.Scan(&all_exist_and_match_course)
	return all_exist_and_match_course, err
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) 
RETURNING id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data
`

type CreateCourseParams struct {
	ID                  uuid.UUID   `json:"id"`
	Name                string      `json:"name"`
	StartDate           pgtype.Date `json:"start_date"`
	EndDate             pgtype.Date `json:"end_date"`
	SemesterTag         pgtype.Text `json:"semester_tag"`
	CourseType          CourseType  `json:"course_type"`
	Ects                pgtype.Int4 `json:"ects"`
	RestrictedData      []byte      `json:"restricted_data"`
	StudentReadableData []byte      `json:"student_readable_data"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.SemesterTag,
		arg.CourseType,
		arg.Ects,
		arg.RestrictedData,
		arg.StudentReadableData,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.SemesterTag,
		&i.CourseType,
		&i.Ects,
		&i.RestrictedData,
		&i.StudentReadableData,
	)
	return i, err
}

const getAllActiveCourses = `-- name: GetAllActiveCourses :many
SELECT id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data FROM course
WHERE end_date >= NOW() - INTERVAL '1 month'
`

func (q *Queries) GetAllActiveCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, getAllActiveCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.SemesterTag,
			&i.CourseType,
			&i.Ects,
			&i.RestrictedData,
			&i.StudentReadableData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data FROM course
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, id uuid.UUID) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.SemesterTag,
		&i.CourseType,
		&i.Ects,
		&i.RestrictedData,
		&i.StudentReadableData,
	)
	return i, err
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE course
SET 
  restricted_data = restricted_data || $2,
  student_readable_data = student_readable_data || $3
WHERE id = $1
`

type UpdateCourseParams struct {
	ID                  uuid.UUID `json:"id"`
	RestrictedData      []byte    `json:"restricted_data"`
	StudentReadableData []byte    `json:"student_readable_data"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.Exec(ctx, updateCourse, arg.ID, arg.RestrictedData, arg.StudentReadableData)
	return err
}
