// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkCoursePhasesBelongToCourse = `-- name: CheckCoursePhasesBelongToCourse :one
WITH matched_phases AS (
  SELECT id
  FROM course_phase
  WHERE id = ANY($1::uuid[])
    AND course_id = $2
)
SELECT CASE 
         WHEN COUNT(*) = cardinality($1::uuid[]) THEN true 
         ELSE false 
       END AS all_exist_and_match_course
FROM matched_phases
`

type CheckCoursePhasesBelongToCourseParams struct {
	Column1  []uuid.UUID `json:"column_1"`
	CourseID uuid.UUID   `json:"course_id"`
}

func (q *Queries) CheckCoursePhasesBelongToCourse(ctx context.Context, arg CheckCoursePhasesBelongToCourseParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkCoursePhasesBelongToCourse, arg.Column1, arg.CourseID)
	var all_exist_and_match_course bool
	err := row.Scan(&all_exist_and_match_course)
	return all_exist_and_match_course, err
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) 
RETURNING id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data
`

type CreateCourseParams struct {
	ID                  uuid.UUID   `json:"id"`
	Name                string      `json:"name"`
	StartDate           pgtype.Date `json:"start_date"`
	EndDate             pgtype.Date `json:"end_date"`
	SemesterTag         pgtype.Text `json:"semester_tag"`
	CourseType          CourseType  `json:"course_type"`
	Ects                pgtype.Int4 `json:"ects"`
	RestrictedData      []byte      `json:"restricted_data"`
	StudentReadableData []byte      `json:"student_readable_data"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.SemesterTag,
		arg.CourseType,
		arg.Ects,
		arg.RestrictedData,
		arg.StudentReadableData,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.SemesterTag,
		&i.CourseType,
		&i.Ects,
		&i.RestrictedData,
		&i.StudentReadableData,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM course
WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCourse, id)
	return err
}

const getAllActiveCoursesAdmin = `-- name: GetAllActiveCoursesAdmin :many
SELECT
     c.id, c.name, c.start_date, c.end_date, c.semester_tag, c.course_type, c.ects, c.restricted_data, c.student_readable_data
FROM
  course c
WHERE
  c.end_date >= NOW() - INTERVAL '1 month'
ORDER BY
    c.semester_tag, c.name DESC
`

func (q *Queries) GetAllActiveCoursesAdmin(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, getAllActiveCoursesAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.SemesterTag,
			&i.CourseType,
			&i.Ects,
			&i.RestrictedData,
			&i.StudentReadableData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllActiveCoursesRestricted = `-- name: GetAllActiveCoursesRestricted :many
WITH parsed_roles AS (
    SELECT
        split_part(role, '-', 1) AS course_name,
        split_part(role, '-', 2) AS semester_tag,
        split_part(role, '-', 3) AS user_role
    FROM
        unnest($1::text[]) AS role
),
user_course_roles AS (
    SELECT
        c.id,
        c.name,
        c.semester_tag,
        c.start_date,
        c.end_date,
        c.course_type,
        c.student_readable_data,
        c.restricted_data,
        c.ects,
        pr.user_role
    FROM
        course c
    INNER JOIN
        parsed_roles pr
        ON c.name = pr.course_name
        AND c.semester_tag = pr.semester_tag
    WHERE
        c.end_date >= NOW() - INTERVAL '1 month'
)
SELECT
    ucr.id,
    ucr.name,
    ucr.start_date,
    ucr.end_date,
    ucr.semester_tag,
    ucr.course_type,
    ucr.ects,
    CASE 
        WHEN COUNT(ucr.user_role) = 1 AND MAX(ucr.user_role) = 'Student' THEN '{}'::jsonb
        ELSE ucr.restricted_data::jsonb
    END AS restricted_data,
    ucr.student_readable_data
FROM
    user_course_roles ucr
GROUP BY
    ucr.id,
    ucr.name,
    ucr.semester_tag,
    ucr.start_date,
    ucr.end_date,
    ucr.course_type,
    ucr.student_readable_data,
    ucr.ects,
    ucr.restricted_data
ORDER BY
    ucr.semester_tag, ucr.name DESC
`

type GetAllActiveCoursesRestrictedRow struct {
	ID                  uuid.UUID   `json:"id"`
	Name                string      `json:"name"`
	StartDate           pgtype.Date `json:"start_date"`
	EndDate             pgtype.Date `json:"end_date"`
	SemesterTag         pgtype.Text `json:"semester_tag"`
	CourseType          CourseType  `json:"course_type"`
	Ects                pgtype.Int4 `json:"ects"`
	RestrictedData      []byte      `json:"restricted_data"`
	StudentReadableData []byte      `json:"student_readable_data"`
}

// struct: Course
func (q *Queries) GetAllActiveCoursesRestricted(ctx context.Context, dollar_1 []string) ([]GetAllActiveCoursesRestrictedRow, error) {
	rows, err := q.db.Query(ctx, getAllActiveCoursesRestricted, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllActiveCoursesRestrictedRow
	for rows.Next() {
		var i GetAllActiveCoursesRestrictedRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.SemesterTag,
			&i.CourseType,
			&i.Ects,
			&i.RestrictedData,
			&i.StudentReadableData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, start_date, end_date, semester_tag, course_type, ects, restricted_data, student_readable_data FROM course
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, id uuid.UUID) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.SemesterTag,
		&i.CourseType,
		&i.Ects,
		&i.RestrictedData,
		&i.StudentReadableData,
	)
	return i, err
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE course
SET 
  restricted_data = restricted_data || $2,
  student_readable_data = student_readable_data || $3,
  start_date            = COALESCE($4, start_date),
  end_date              = COALESCE($5, end_date),
  ects                  = COALESCE($6, ects),
  course_type           = COALESCE($7, course_type)
WHERE id = $1
`

type UpdateCourseParams struct {
	ID                  uuid.UUID      `json:"id"`
	RestrictedData      []byte         `json:"restricted_data"`
	StudentReadableData []byte         `json:"student_readable_data"`
	StartDate           pgtype.Date    `json:"start_date"`
	EndDate             pgtype.Date    `json:"end_date"`
	Ects                pgtype.Int4    `json:"ects"`
	CourseType          NullCourseType `json:"course_type"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.Exec(ctx, updateCourse,
		arg.ID,
		arg.RestrictedData,
		arg.StudentReadableData,
		arg.StartDate,
		arg.EndDate,
		arg.Ects,
		arg.CourseType,
	)
	return err
}
