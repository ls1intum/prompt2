// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (id, name, start_date, end_date, semester_tag, course_type, ects, meta_data)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
RETURNING id, name, start_date, end_date, semester_tag, course_type, ects, meta_data
`

type CreateCourseParams struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	SemesterTag pgtype.Text `json:"semester_tag"`
	CourseType  CourseType  `json:"course_type"`
	Ects        pgtype.Int4 `json:"ects"`
	MetaData    []byte      `json:"meta_data"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.ID,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.SemesterTag,
		arg.CourseType,
		arg.Ects,
		arg.MetaData,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.SemesterTag,
		&i.CourseType,
		&i.Ects,
		&i.MetaData,
	)
	return i, err
}

const getAllCourses = `-- name: GetAllCourses :many
SELECT id, name, start_date, end_date, semester_tag, course_type, ects, meta_data FROM course
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.SemesterTag,
			&i.CourseType,
			&i.Ects,
			&i.MetaData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, start_date, end_date, semester_tag, course_type, ects, meta_data FROM course
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, id uuid.UUID) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.StartDate,
		&i.EndDate,
		&i.SemesterTag,
		&i.CourseType,
		&i.Ects,
		&i.MetaData,
	)
	return i, err
}
