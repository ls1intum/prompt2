// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course_participation.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCourseParticipation = `-- name: CreateCourseParticipation :one
INSERT INTO course_participation (id, course_id, student_id)
VALUES ($1, $2, $3)
RETURNING id, course_id, student_id
`

type CreateCourseParticipationParams struct {
	ID        uuid.UUID `json:"id"`
	CourseID  uuid.UUID `json:"course_id"`
	StudentID uuid.UUID `json:"student_id"`
}

func (q *Queries) CreateCourseParticipation(ctx context.Context, arg CreateCourseParticipationParams) (CourseParticipation, error) {
	row := q.db.QueryRow(ctx, createCourseParticipation, arg.ID, arg.CourseID, arg.StudentID)
	var i CourseParticipation
	err := row.Scan(&i.ID, &i.CourseID, &i.StudentID)
	return i, err
}

const getAllCourseParticipationsForCourse = `-- name: GetAllCourseParticipationsForCourse :many
SELECT id, course_id, student_id FROM course_participation
WHERE course_id = $1
`

func (q *Queries) GetAllCourseParticipationsForCourse(ctx context.Context, courseID uuid.UUID) ([]CourseParticipation, error) {
	rows, err := q.db.Query(ctx, getAllCourseParticipationsForCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseParticipation
	for rows.Next() {
		var i CourseParticipation
		if err := rows.Scan(&i.ID, &i.CourseID, &i.StudentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCourseParticipationsForStudent = `-- name: GetAllCourseParticipationsForStudent :many
SELECT id, course_id, student_id FROM course_participation
WHERE student_id = $1
`

func (q *Queries) GetAllCourseParticipationsForStudent(ctx context.Context, studentID uuid.UUID) ([]CourseParticipation, error) {
	rows, err := q.db.Query(ctx, getAllCourseParticipationsForStudent, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseParticipation
	for rows.Next() {
		var i CourseParticipation
		if err := rows.Scan(&i.ID, &i.CourseID, &i.StudentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseParticipation = `-- name: GetCourseParticipation :one
SELECT id, course_id, student_id FROM course_participation
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCourseParticipation(ctx context.Context, id uuid.UUID) (CourseParticipation, error) {
	row := q.db.QueryRow(ctx, getCourseParticipation, id)
	var i CourseParticipation
	err := row.Scan(&i.ID, &i.CourseID, &i.StudentID)
	return i, err
}
