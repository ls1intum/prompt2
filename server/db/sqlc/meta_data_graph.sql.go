// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meta_data_graph.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createMetaDataConnection = `-- name: CreateMetaDataConnection :exec
INSERT INTO meta_data_dependency_graph (from_course_phase_id, to_course_phase_id, from_course_phase_DTO_id, to_course_phase_DTO_id)
VALUES ($1, $2, $3, $4)
`

type CreateMetaDataConnectionParams struct {
	FromCoursePhaseID    uuid.UUID `json:"from_course_phase_id"`
	ToCoursePhaseID      uuid.UUID `json:"to_course_phase_id"`
	FromCoursePhaseDtoID uuid.UUID `json:"from_course_phase_dto_id"`
	ToCoursePhaseDtoID   uuid.UUID `json:"to_course_phase_dto_id"`
}

// TODO: adjust to new schema
func (q *Queries) CreateMetaDataConnection(ctx context.Context, arg CreateMetaDataConnectionParams) error {
	_, err := q.db.Exec(ctx, createMetaDataConnection,
		arg.FromCoursePhaseID,
		arg.ToCoursePhaseID,
		arg.FromCoursePhaseDtoID,
		arg.ToCoursePhaseDtoID,
	)
	return err
}

const deleteMetaDataGraphConnections = `-- name: DeleteMetaDataGraphConnections :exec
DELETE FROM meta_data_dependency_graph
WHERE from_phase_id IN 
    (SELECT id FROM course_phase WHERE course_id = $1)
`

func (q *Queries) DeleteMetaDataGraphConnections(ctx context.Context, courseID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMetaDataGraphConnections, courseID)
	return err
}

const getMetaDataGraph = `-- name: GetMetaDataGraph :many
SELECT mg.from_course_phase_id, mg.to_course_phase_id, mg.from_course_phase_dto_id, mg.to_course_phase_dto_id
FROM meta_data_dependency_graph mg
JOIN course_phase cp
  ON mg.from_course_phase_id = cp.id
WHERE cp.course_id = $1
`

func (q *Queries) GetMetaDataGraph(ctx context.Context, courseID uuid.UUID) ([]MetaDataDependencyGraph, error) {
	rows, err := q.db.Query(ctx, getMetaDataGraph, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MetaDataDependencyGraph
	for rows.Next() {
		var i MetaDataDependencyGraph
		if err := rows.Scan(
			&i.FromCoursePhaseID,
			&i.ToCoursePhaseID,
			&i.FromCoursePhaseDtoID,
			&i.ToCoursePhaseDtoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
