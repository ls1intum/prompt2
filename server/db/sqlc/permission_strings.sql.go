// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission_strings.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getPermissionStringByCourseID = `-- name: GetPermissionStringByCourseID :one
SELECT CONCAT(semester_tag, '-', name) AS course_identifier
FROM course
WHERE id = $1
`

func (q *Queries) GetPermissionStringByCourseID(ctx context.Context, id uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getPermissionStringByCourseID, id)
	var course_identifier interface{}
	err := row.Scan(&course_identifier)
	return course_identifier, err
}

const getPermissionStringByCourseParticipationID = `-- name: GetPermissionStringByCourseParticipationID :one
SELECT CONCAT(c.semester_tag, '-', c.name) AS course_identifier
FROM course c
JOIN course_participation cp ON c.id = cp.course_id
WHERE cp.id = $1
`

func (q *Queries) GetPermissionStringByCourseParticipationID(ctx context.Context, id uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getPermissionStringByCourseParticipationID, id)
	var course_identifier interface{}
	err := row.Scan(&course_identifier)
	return course_identifier, err
}

const getPermissionStringByCoursePhaseID = `-- name: GetPermissionStringByCoursePhaseID :one
SELECT CONCAT(c.semester_tag, '-', c.name) AS course_identifier
FROM course c
JOIN course_phase cp ON c.id = cp.course_id
WHERE cp.id = $1
`

func (q *Queries) GetPermissionStringByCoursePhaseID(ctx context.Context, id uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getPermissionStringByCoursePhaseID, id)
	var course_identifier interface{}
	err := row.Scan(&course_identifier)
	return course_identifier, err
}

const getPermissionStringByCoursePhaseParticipationID = `-- name: GetPermissionStringByCoursePhaseParticipationID :one
SELECT CONCAT(c.semester_tag, '-', c.name) AS course_identifier
FROM course c
JOIN course_participation cp ON c.id = cp.course_id
JOIN course_phase_participation cpp ON cp.id = cpp.course_participation_id
WHERE cpp.id = $1
`

func (q *Queries) GetPermissionStringByCoursePhaseParticipationID(ctx context.Context, id uuid.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getPermissionStringByCoursePhaseParticipationID, id)
	var course_identifier interface{}
	err := row.Scan(&course_identifier)
	return course_identifier, err
}
