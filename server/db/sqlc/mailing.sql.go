// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mailing.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getConfirmationMailingInformation = `-- name: GetConfirmationMailingInformation :one
SELECT 
    s.first_name,
    s.last_name,
    s.email,
    s.matriculation_number,
    s.university_login,
    s.study_degree,
    s.current_semester,
    s.study_program,
    c.name AS course_name,
    c.start_date AS course_start_date,
    c.end_date AS course_end_date,
    (p.meta_data->>'applicationEndDate')::text AS application_end_date,
    COALESCE((p.meta_data->'mailingConfig'->>'confirmationMail'), '')::text AS confirmation_mail_template,
    COALESCE((p.meta_data->'mailingConfig'->>'sendConfirmationMail')::boolean, false)::boolean AS send_confirmation_mail
FROM 
    course_phase_participation cpp
JOIN 
    course_participation cp ON cpp.course_participation_id = cp.id
JOIN 
    student s ON cp.student_id = s.id
JOIN 
    course_phase p ON cpp.course_phase_id = p.id
JOIN 
    course c ON p.course_id = c.id
WHERE 
    cpp.id = $1
    AND cpp.course_phase_id = $2
`

type GetConfirmationMailingInformationParams struct {
	ID            uuid.UUID `json:"id"`
	CoursePhaseID uuid.UUID `json:"course_phase_id"`
}

type GetConfirmationMailingInformationRow struct {
	FirstName                pgtype.Text `json:"first_name"`
	LastName                 pgtype.Text `json:"last_name"`
	Email                    pgtype.Text `json:"email"`
	MatriculationNumber      pgtype.Text `json:"matriculation_number"`
	UniversityLogin          pgtype.Text `json:"university_login"`
	StudyDegree              StudyDegree `json:"study_degree"`
	CurrentSemester          pgtype.Int4 `json:"current_semester"`
	StudyProgram             pgtype.Text `json:"study_program"`
	CourseName               string      `json:"course_name"`
	CourseStartDate          pgtype.Date `json:"course_start_date"`
	CourseEndDate            pgtype.Date `json:"course_end_date"`
	ApplicationEndDate       string      `json:"application_end_date"`
	ConfirmationMailTemplate string      `json:"confirmation_mail_template"`
	SendConfirmationMail     bool        `json:"send_confirmation_mail"`
}

func (q *Queries) GetConfirmationMailingInformation(ctx context.Context, arg GetConfirmationMailingInformationParams) (GetConfirmationMailingInformationRow, error) {
	row := q.db.QueryRow(ctx, getConfirmationMailingInformation, arg.ID, arg.CoursePhaseID)
	var i GetConfirmationMailingInformationRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.MatriculationNumber,
		&i.UniversityLogin,
		&i.StudyDegree,
		&i.CurrentSemester,
		&i.StudyProgram,
		&i.CourseName,
		&i.CourseStartDate,
		&i.CourseEndDate,
		&i.ApplicationEndDate,
		&i.ConfirmationMailTemplate,
		&i.SendConfirmationMail,
	)
	return i, err
}
