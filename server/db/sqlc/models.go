// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Gender string

const (
	GenderMale           Gender = "male"
	GenderFemale         Gender = "female"
	GenderDiverse        Gender = "diverse"
	GenderPreferNotToSay Gender = "prefer_not_to_say"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender `json:"gender"`
	Valid  bool   `json:"valid"` // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type ApplicationAnswerMultiSelect struct {
	ID                         uuid.UUID `json:"id"`
	ApplicationQuestionID      uuid.UUID `json:"application_question_id"`
	CoursePhaseParticipationID uuid.UUID `json:"course_phase_participation_id"`
	Answer                     []string  `json:"answer"`
}

type ApplicationAnswerText struct {
	ID                         uuid.UUID   `json:"id"`
	ApplicationQuestionID      uuid.UUID   `json:"application_question_id"`
	CoursePhaseParticipationID uuid.UUID   `json:"course_phase_participation_id"`
	Answer                     pgtype.Text `json:"answer"`
}

type ApplicationAssessment struct {
	ID                         uuid.UUID   `json:"id"`
	CoursePhaseParticipationID uuid.UUID   `json:"course_phase_participation_id"`
	Score                      pgtype.Int4 `json:"score"`
}

type ApplicationQuestionMultiSelect struct {
	ID            uuid.UUID   `json:"id"`
	CoursePhaseID uuid.UUID   `json:"course_phase_id"`
	Title         pgtype.Text `json:"title"`
	Description   pgtype.Text `json:"description"`
	Placeholder   pgtype.Text `json:"placeholder"`
	ErrorMessage  pgtype.Text `json:"error_message"`
	IsRequired    pgtype.Bool `json:"is_required"`
	MinSelect     pgtype.Int4 `json:"min_select"`
	MaxSelect     pgtype.Int4 `json:"max_select"`
	Options       []string    `json:"options"`
	OrderNum      pgtype.Int4 `json:"order_num"`
}

type ApplicationQuestionText struct {
	ID              uuid.UUID   `json:"id"`
	CoursePhaseID   uuid.UUID   `json:"course_phase_id"`
	Title           pgtype.Text `json:"title"`
	Description     pgtype.Text `json:"description"`
	Placeholder     pgtype.Text `json:"placeholder"`
	ValidationRegex pgtype.Text `json:"validation_regex"`
	ErrorMessage    pgtype.Text `json:"error_message"`
	IsRequired      pgtype.Bool `json:"is_required"`
	AllowedLength   pgtype.Int4 `json:"allowed_length"`
	OrderNum        pgtype.Int4 `json:"order_num"`
}

type Course struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	SemesterTag pgtype.Text `json:"semester_tag"`
	MetaData    []byte      `json:"meta_data"`
}

type CourseParticipation struct {
	ID        uuid.UUID `json:"id"`
	CourseID  uuid.UUID `json:"course_id"`
	StudentID uuid.UUID `json:"student_id"`
}

type CoursePhase struct {
	ID                uuid.UUID   `json:"id"`
	CourseID          uuid.UUID   `json:"course_id"`
	Name              pgtype.Text `json:"name"`
	MetaData          []byte      `json:"meta_data"`
	IsInitialPhase    bool        `json:"is_initial_phase"`
	CoursePhaseTypeID pgtype.UUID `json:"course_phase_type_id"`
}

type CoursePhaseGraph struct {
	FromCoursePhaseID uuid.UUID `json:"from_course_phase_id"`
	ToCoursePhaseID   uuid.UUID `json:"to_course_phase_id"`
}

type CoursePhaseParticipation struct {
	ID                    uuid.UUID   `json:"id"`
	CourseParticipationID uuid.UUID   `json:"course_participation_id"`
	CoursePhaseID         uuid.UUID   `json:"course_phase_id"`
	Passed                pgtype.Bool `json:"passed"`
	MetaData              []byte      `json:"meta_data"`
}

type CoursePhaseType struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

type Student struct {
	ID                   uuid.UUID   `json:"id"`
	FirstName            pgtype.Text `json:"first_name"`
	LastName             pgtype.Text `json:"last_name"`
	Email                pgtype.Text `json:"email"`
	MatriculationNumber  pgtype.Text `json:"matriculation_number"`
	UniversityLogin      pgtype.Text `json:"university_login"`
	HasUniversityAccount pgtype.Bool `json:"has_university_account"`
	Gender               Gender      `json:"gender"`
}
