// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course_phase.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCoursePhase = `-- name: CreateCoursePhase :one
INSERT INTO course_phase (id, course_id, name, is_initial_phase, restricted_data, student_readable_data, course_phase_type_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, course_id, name, restricted_data, is_initial_phase, course_phase_type_id, student_readable_data
`

type CreateCoursePhaseParams struct {
	ID                  uuid.UUID   `json:"id"`
	CourseID            uuid.UUID   `json:"course_id"`
	Name                pgtype.Text `json:"name"`
	IsInitialPhase      bool        `json:"is_initial_phase"`
	RestrictedData      []byte      `json:"restricted_data"`
	StudentReadableData []byte      `json:"student_readable_data"`
	CoursePhaseTypeID   uuid.UUID   `json:"course_phase_type_id"`
}

func (q *Queries) CreateCoursePhase(ctx context.Context, arg CreateCoursePhaseParams) (CoursePhase, error) {
	row := q.db.QueryRow(ctx, createCoursePhase,
		arg.ID,
		arg.CourseID,
		arg.Name,
		arg.IsInitialPhase,
		arg.RestrictedData,
		arg.StudentReadableData,
		arg.CoursePhaseTypeID,
	)
	var i CoursePhase
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Name,
		&i.RestrictedData,
		&i.IsInitialPhase,
		&i.CoursePhaseTypeID,
		&i.StudentReadableData,
	)
	return i, err
}

const deleteCoursePhase = `-- name: DeleteCoursePhase :exec
DELETE FROM course_phase
WHERE id = $1
`

func (q *Queries) DeleteCoursePhase(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCoursePhase, id)
	return err
}

const getAllCoursePhaseForCourse = `-- name: GetAllCoursePhaseForCourse :many
SELECT cp.id, cp.course_id, cp.name, cp.restricted_data, cp.is_initial_phase, cp.course_phase_type_id, cp.student_readable_data, cpt.name AS course_phase_type_name
FROM course_phase cp
INNER JOIN course_phase_type cpt ON cp.course_phase_type_id = cpt.id
WHERE cp.course_id = $1
`

type GetAllCoursePhaseForCourseRow struct {
	ID                  uuid.UUID   `json:"id"`
	CourseID            uuid.UUID   `json:"course_id"`
	Name                pgtype.Text `json:"name"`
	RestrictedData      []byte      `json:"restricted_data"`
	IsInitialPhase      bool        `json:"is_initial_phase"`
	CoursePhaseTypeID   uuid.UUID   `json:"course_phase_type_id"`
	StudentReadableData []byte      `json:"student_readable_data"`
	CoursePhaseTypeName string      `json:"course_phase_type_name"`
}

func (q *Queries) GetAllCoursePhaseForCourse(ctx context.Context, courseID uuid.UUID) ([]GetAllCoursePhaseForCourseRow, error) {
	rows, err := q.db.Query(ctx, getAllCoursePhaseForCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCoursePhaseForCourseRow
	for rows.Next() {
		var i GetAllCoursePhaseForCourseRow
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Name,
			&i.RestrictedData,
			&i.IsInitialPhase,
			&i.CoursePhaseTypeID,
			&i.StudentReadableData,
			&i.CoursePhaseTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourseIDByCoursePhaseID = `-- name: GetCourseIDByCoursePhaseID :one
SELECT course_id
FROM course_phase
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCourseIDByCoursePhaseID(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getCourseIDByCoursePhaseID, id)
	var course_id uuid.UUID
	err := row.Scan(&course_id)
	return course_id, err
}

const getCoursePhase = `-- name: GetCoursePhase :one
SELECT cp.id, cp.course_id, cp.name, cp.restricted_data, cp.is_initial_phase, cp.course_phase_type_id, cp.student_readable_data, cpt.name AS course_phase_type_name
FROM course_phase cp
INNER JOIN course_phase_type cpt ON cp.course_phase_type_id = cpt.id
WHERE cp.id = $1
LIMIT 1
`

type GetCoursePhaseRow struct {
	ID                  uuid.UUID   `json:"id"`
	CourseID            uuid.UUID   `json:"course_id"`
	Name                pgtype.Text `json:"name"`
	RestrictedData      []byte      `json:"restricted_data"`
	IsInitialPhase      bool        `json:"is_initial_phase"`
	CoursePhaseTypeID   uuid.UUID   `json:"course_phase_type_id"`
	StudentReadableData []byte      `json:"student_readable_data"`
	CoursePhaseTypeName string      `json:"course_phase_type_name"`
}

func (q *Queries) GetCoursePhase(ctx context.Context, id uuid.UUID) (GetCoursePhaseRow, error) {
	row := q.db.QueryRow(ctx, getCoursePhase, id)
	var i GetCoursePhaseRow
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Name,
		&i.RestrictedData,
		&i.IsInitialPhase,
		&i.CoursePhaseTypeID,
		&i.StudentReadableData,
		&i.CoursePhaseTypeName,
	)
	return i, err
}

const updateCoursePhase = `-- name: UpdateCoursePhase :exec
UPDATE course_phase
SET 
    name = COALESCE($2, name), 
    restricted_data = restricted_data || $3,
    student_readable_data = student_readable_data || $4
WHERE id = $1
`

type UpdateCoursePhaseParams struct {
	ID                  uuid.UUID   `json:"id"`
	Name                pgtype.Text `json:"name"`
	RestrictedData      []byte      `json:"restricted_data"`
	StudentReadableData []byte      `json:"student_readable_data"`
}

func (q *Queries) UpdateCoursePhase(ctx context.Context, arg UpdateCoursePhaseParams) error {
	_, err := q.db.Exec(ctx, updateCoursePhase,
		arg.ID,
		arg.Name,
		arg.RestrictedData,
		arg.StudentReadableData,
	)
	return err
}
