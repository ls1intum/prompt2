// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: application.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createApplicationAnswerMultiSelect = `-- name: CreateApplicationAnswerMultiSelect :one
INSERT INTO application_answer_multi_select (id, application_question_id, course_phase_participation_id, answer)
VALUES ($1, $2, $3, $4)
RETURNING id, application_question_id, course_phase_participation_id, answer
`

type CreateApplicationAnswerMultiSelectParams struct {
	ID                         uuid.UUID `json:"id"`
	ApplicationQuestionID      uuid.UUID `json:"application_question_id"`
	CoursePhaseParticipationID uuid.UUID `json:"course_phase_participation_id"`
	Answer                     []string  `json:"answer"`
}

func (q *Queries) CreateApplicationAnswerMultiSelect(ctx context.Context, arg CreateApplicationAnswerMultiSelectParams) (ApplicationAnswerMultiSelect, error) {
	row := q.db.QueryRow(ctx, createApplicationAnswerMultiSelect,
		arg.ID,
		arg.ApplicationQuestionID,
		arg.CoursePhaseParticipationID,
		arg.Answer,
	)
	var i ApplicationAnswerMultiSelect
	err := row.Scan(
		&i.ID,
		&i.ApplicationQuestionID,
		&i.CoursePhaseParticipationID,
		&i.Answer,
	)
	return i, err
}

const createApplicationAnswerText = `-- name: CreateApplicationAnswerText :one
INSERT INTO application_answer_text (id, application_question_id, course_phase_participation_id, answer)
VALUES ($1, $2, $3, $4)
RETURNING id, application_question_id, course_phase_participation_id, answer
`

type CreateApplicationAnswerTextParams struct {
	ID                         uuid.UUID   `json:"id"`
	ApplicationQuestionID      uuid.UUID   `json:"application_question_id"`
	CoursePhaseParticipationID uuid.UUID   `json:"course_phase_participation_id"`
	Answer                     pgtype.Text `json:"answer"`
}

func (q *Queries) CreateApplicationAnswerText(ctx context.Context, arg CreateApplicationAnswerTextParams) (ApplicationAnswerText, error) {
	row := q.db.QueryRow(ctx, createApplicationAnswerText,
		arg.ID,
		arg.ApplicationQuestionID,
		arg.CoursePhaseParticipationID,
		arg.Answer,
	)
	var i ApplicationAnswerText
	err := row.Scan(
		&i.ID,
		&i.ApplicationQuestionID,
		&i.CoursePhaseParticipationID,
		&i.Answer,
	)
	return i, err
}

const createApplicationQuestionMultiSelect = `-- name: CreateApplicationQuestionMultiSelect :one
INSERT INTO application_question_multi_select (id, course_phase_id, title, description, placeholder, error_message, is_required, min_select, max_select, options, order_num)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, course_phase_id, title, description, placeholder, error_message, is_required, min_select, max_select, options, order_num
`

type CreateApplicationQuestionMultiSelectParams struct {
	ID            uuid.UUID   `json:"id"`
	CoursePhaseID uuid.UUID   `json:"course_phase_id"`
	Title         pgtype.Text `json:"title"`
	Description   pgtype.Text `json:"description"`
	Placeholder   pgtype.Text `json:"placeholder"`
	ErrorMessage  pgtype.Text `json:"error_message"`
	IsRequired    pgtype.Bool `json:"is_required"`
	MinSelect     pgtype.Int4 `json:"min_select"`
	MaxSelect     pgtype.Int4 `json:"max_select"`
	Options       []string    `json:"options"`
	OrderNum      pgtype.Int4 `json:"order_num"`
}

func (q *Queries) CreateApplicationQuestionMultiSelect(ctx context.Context, arg CreateApplicationQuestionMultiSelectParams) (ApplicationQuestionMultiSelect, error) {
	row := q.db.QueryRow(ctx, createApplicationQuestionMultiSelect,
		arg.ID,
		arg.CoursePhaseID,
		arg.Title,
		arg.Description,
		arg.Placeholder,
		arg.ErrorMessage,
		arg.IsRequired,
		arg.MinSelect,
		arg.MaxSelect,
		arg.Options,
		arg.OrderNum,
	)
	var i ApplicationQuestionMultiSelect
	err := row.Scan(
		&i.ID,
		&i.CoursePhaseID,
		&i.Title,
		&i.Description,
		&i.Placeholder,
		&i.ErrorMessage,
		&i.IsRequired,
		&i.MinSelect,
		&i.MaxSelect,
		&i.Options,
		&i.OrderNum,
	)
	return i, err
}

const createApplicationQuestionText = `-- name: CreateApplicationQuestionText :one
INSERT INTO application_question_text (id, course_phase_id, title, description, placeholder, validation_regex, error_message, is_required, allowed_length, order_num)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, course_phase_id, title, description, placeholder, validation_regex, error_message, is_required, allowed_length, order_num
`

type CreateApplicationQuestionTextParams struct {
	ID              uuid.UUID   `json:"id"`
	CoursePhaseID   uuid.UUID   `json:"course_phase_id"`
	Title           pgtype.Text `json:"title"`
	Description     pgtype.Text `json:"description"`
	Placeholder     pgtype.Text `json:"placeholder"`
	ValidationRegex pgtype.Text `json:"validation_regex"`
	ErrorMessage    pgtype.Text `json:"error_message"`
	IsRequired      pgtype.Bool `json:"is_required"`
	AllowedLength   pgtype.Int4 `json:"allowed_length"`
	OrderNum        pgtype.Int4 `json:"order_num"`
}

func (q *Queries) CreateApplicationQuestionText(ctx context.Context, arg CreateApplicationQuestionTextParams) (ApplicationQuestionText, error) {
	row := q.db.QueryRow(ctx, createApplicationQuestionText,
		arg.ID,
		arg.CoursePhaseID,
		arg.Title,
		arg.Description,
		arg.Placeholder,
		arg.ValidationRegex,
		arg.ErrorMessage,
		arg.IsRequired,
		arg.AllowedLength,
		arg.OrderNum,
	)
	var i ApplicationQuestionText
	err := row.Scan(
		&i.ID,
		&i.CoursePhaseID,
		&i.Title,
		&i.Description,
		&i.Placeholder,
		&i.ValidationRegex,
		&i.ErrorMessage,
		&i.IsRequired,
		&i.AllowedLength,
		&i.OrderNum,
	)
	return i, err
}

const getApplicationQuestionsMultiSelectForCoursePhase = `-- name: GetApplicationQuestionsMultiSelectForCoursePhase :many
SELECT id, course_phase_id, title, description, placeholder, error_message, is_required, min_select, max_select, options, order_num FROM application_question_multi_select
WHERE course_phase_id = $1
`

func (q *Queries) GetApplicationQuestionsMultiSelectForCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]ApplicationQuestionMultiSelect, error) {
	rows, err := q.db.Query(ctx, getApplicationQuestionsMultiSelectForCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationQuestionMultiSelect
	for rows.Next() {
		var i ApplicationQuestionMultiSelect
		if err := rows.Scan(
			&i.ID,
			&i.CoursePhaseID,
			&i.Title,
			&i.Description,
			&i.Placeholder,
			&i.ErrorMessage,
			&i.IsRequired,
			&i.MinSelect,
			&i.MaxSelect,
			&i.Options,
			&i.OrderNum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApplicationQuestionsTextForCoursePhase = `-- name: GetApplicationQuestionsTextForCoursePhase :many
SELECT id, course_phase_id, title, description, placeholder, validation_regex, error_message, is_required, allowed_length, order_num FROM application_question_text
WHERE course_phase_id = $1
`

func (q *Queries) GetApplicationQuestionsTextForCoursePhase(ctx context.Context, coursePhaseID uuid.UUID) ([]ApplicationQuestionText, error) {
	rows, err := q.db.Query(ctx, getApplicationQuestionsTextForCoursePhase, coursePhaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApplicationQuestionText
	for rows.Next() {
		var i ApplicationQuestionText
		if err := rows.Scan(
			&i.ID,
			&i.CoursePhaseID,
			&i.Title,
			&i.Description,
			&i.Placeholder,
			&i.ValidationRegex,
			&i.ErrorMessage,
			&i.IsRequired,
			&i.AllowedLength,
			&i.OrderNum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
