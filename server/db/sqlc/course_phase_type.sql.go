// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: course_phase_type.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCoursePhaseType = `-- name: CreateCoursePhaseType :exec
INSERT INTO course_phase_type (id, name, initial_phase)
VALUES ($1, $2, $3)
`

type CreateCoursePhaseTypeParams struct {
	ID           uuid.UUID `json:"id"`
	Name         string    `json:"name"`
	InitialPhase bool      `json:"initial_phase"`
}

func (q *Queries) CreateCoursePhaseType(ctx context.Context, arg CreateCoursePhaseTypeParams) error {
	_, err := q.db.Exec(ctx, createCoursePhaseType, arg.ID, arg.Name, arg.InitialPhase)
	return err
}

const getAllCoursePhaseTypes = `-- name: GetAllCoursePhaseTypes :many
SELECT id, name, required_input_meta_data, provided_output_meta_data, initial_phase FROM course_phase_type
`

func (q *Queries) GetAllCoursePhaseTypes(ctx context.Context) ([]CoursePhaseType, error) {
	rows, err := q.db.Query(ctx, getAllCoursePhaseTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoursePhaseType
	for rows.Next() {
		var i CoursePhaseType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RequiredInputMetaData,
			&i.ProvidedOutputMetaData,
			&i.InitialPhase,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testApplicationPhaseTypeExists = `-- name: TestApplicationPhaseTypeExists :one
SELECT EXISTS (
    SELECT 1
    FROM course_phase_type
    WHERE name = 'Application'
) AS does_exist
`

func (q *Queries) TestApplicationPhaseTypeExists(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, testApplicationPhaseTypeExists)
	var does_exist bool
	err := row.Scan(&does_exist)
	return does_exist, err
}
